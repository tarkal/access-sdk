{
  "openapi": "3.0.0",
  "info": {
    "title": "Predictive Access SDK",
    "description": "The official Predictive Access SDK",
    "contact": {
      "name": "Predictive Support",
      "url": "https://predictivetech.io/contact",
      "email": "support@predictivetech.io"
    },
    "version": "1.0.0"
  },
  "components": {
    "schemas": {
      "data": {},
      "account": {
        "properties": {
          "id": {
            "description": "A unique identifier. This is generated by the system at creation and cannot be specified.",
            "type": "string"
          },
          "name": {
            "description": "A simple name to help identify the account within its operational context.",
            "type": "string"
          },
          "description": {
            "description": "A short descriptive field to help identify the account within its operational context. ",
            "type": "string"
          },
          "data": {
            "$ref": "#/components/schemas/data",
            "description": "A multimap defining a custom collection of KSVP (Key Set Value Pair)"
          }
        }
      },
      "user": {
        "properties": {
          "id": {
            "description": "A unique identifier. This is generated by the system at creation and cannot be specified.",
            "type": "string"
          },
          "email": {
            "description": "A unique email assigned to to a user for security and identification.",
            "type": "string"
          },
          "username": {
            "description": "A unique username assigned to to a user for identification.",
            "type": "string"
          },
          "name": {
            "description": "The first and last name of the user.",
            "type": "string"
          },
          "state": {
            "description": "The operational state of an account. This value can be 'ACTIVE', 'SUSPENDED' or 'UNCONFIRMED'.",
            "type": "string"
          },
          "data": {
            "$ref": "#/components/schemas/data",
            "description": "A multimap defining a custom collection of KSVP (Key Set Value Pair)"
          },
          "roleIds": {
            "description": "A collection of the role ids associated with the user.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "groupIds": {
            "description": "A collection of the group ids associated with the user.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "bio": {
            "description": "A short biography or description of the user.",
            "type": "string"
          }
        }
      },
      "group": {
        "properties": {
          "id": {
            "description": "A unique identifier. This is generated by the system at creation and cannot be specified.",
            "type": "string"
          },
          "name": {
            "description": "A simple name to help identify the group within its operational context.",
            "type": "string"
          },
          "description": {
            "description": "A short descriptive field to help identify the group within its operational context. ",
            "type": "string"
          },
          "data": {
            "$ref": "#/components/schemas/data",
            "description": "A multimap defining a custom collection of KSVP (Key Set Value Pair)"
          }
        }
      },
      "rule": {
        "properties": {
          "id": {
            "description": "An optional field identifier.",
            "type": "string"
          },
          "field": {
            "description": "The optional GUI field. Even though this property is optional it is recommended or the GUI may fail to recognise the field.",
            "type": "string"
          },
          "type": {
            "description": "The optional field type. If specified a best effort will be made to perform a type cast at evaluation time of the value. If no type is specified or the cast fails the value will be evaluated as a string.",
            "type": "string"
          },
          "input": {
            "description": "The required field input name. During a rule evaluation the pattern is [input] [operator] [value]. e.g. [id] [equal] [123]",
            "type": "string"
          },
          "operator": {
            "description": "The required operator to define the evaluation comparison that must be achieved during evaluation. These values can be: `equal`, `not equal`, `in`, `not in`, `start`, `not start`, `end`, `not end`, `less`, `less or equal`, `greater` or `greater or equal`.",
            "type": "string"
          },
          "value": {
            "description": "The required field input value. All value types are serialised to a string for transport. The `type` property is used to type cast the value at evaluation time. During a rule evaluation the pattern is [input] [operator] [value]. e.g. [id] [equal] [123]",
            "type": "string"
          },
          "expression": {
            "$ref": "#/components/schemas/expression",
            "description": "An optional sub-expression to evaluate as part of this rule."
          }
        }
      },
      "expression": {
        "properties": {
          "condition": {
            "description": "The logical condition that should be applied to the rule evaluation. This can be `AND` or `OR`.",
            "type": "string"
          },
          "rules": {
            "description": "A collection of rules that are to be evaluated as part of this expression.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/rule"
            }
          }
        }
      },
      "statement": {},
      "role": {}
    },
    "securitySchemes": {
      "basic_auth": {
        "type": "http",
        "description": "Basic authentication supports root credentials. The identifier can be either your email or username.",
        "scheme": "Basic"
      },
      "session_auth": {
        "type": "http",
        "description": "Authenticated tokens can be used to provide client session authentication.",
        "scheme": "Bearer"
      },
      "validation_auth": {
        "type": "http",
        "description": "Unconfirmed users are issued with a time sensitive bearer token via email which they must supply for one time validation.",
        "scheme": "Bearer"
      },
      "key_auth": {
        "type": "http",
        "description": "Predictive uses asymmetric API keys to authenticate. For more information on how to generate a digest request signature please see the API documentation.",
        "scheme": "Digest"
      }
    }
  },
  "tags": [
    {
      "name": "account",
      "description": "Administrative operations accessible only by system administrators. These operations are not available for general use and will result in 404 response."
    },
    {
      "name": "user",
      "description": "Operations for controlling users and their associated privileges through groups and roles."
    },
    {
      "name": "group",
      "description": "Operations for controlling groups and their association with roles and users."
    },
    {
      "name": "role",
      "description": "Operations for controlling roles. These are the fundamental privilege models that determine a users access and functional capabilities."
    },
    {
      "name": "log",
      "description": "Operations for controlling logs. Logs are user requested loggings of system events. To facilitate interaction with logs they are categorised using groups and streams. Groups are user defined names to categorise the log into distinct groups. Streams are are a subdivision of groups using the originating service and a temporal marker."
    },
    {
      "name": "api_key",
      "description": "Operations for controlling API keys. These operations can only be performed by and for the original calling user."
    }
  ]
}