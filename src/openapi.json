{
    "swagger":"2.0",
    "info":{
       "title":"Predictive Access SDK",
       "description":"The official Predictive Access SDK",
       "contact":{
          "name":"Predictive Support",
          "url":"https://predictivetech.io/contact",
          "email":"support@predictivetech.io"
       },
       "license":{
          "name":"Apache 2.0",
          "url":"http://www.apache.org/licenses/LICENSE-2.0.html"
       },
       "version":"1.0.0"
    },
    "host":"api.predictivetech.io",
    "basePath":"/access",
    "schemes":[
       "https"
    ],
    "paths":{
       "/accounts":{
          "get":{
             "summary":"get_accounts",
             "description":"Retrieve a collection of accounts.",
             "tags":[
                "account"
             ],
             "operationId":"get_accounts",
             "produces":[
                "application/json"
             ],
             "parameters":[
                {
                   "name":"authorization",
                   "in":"header",
                   "description":"Due to the limitations of the Open API 2 specification authorization headers are supplied on a per function basis. The acceptable formats for this header are `Bearer <session_id>` where `<session_id>` is replaced by the session id or `Digest <api_key_signature>` where `<api_key_signature>` is replaced by the API key signature.",
                   "required":true,
                   "type":"string"
                },
                {
                   "name":"sort",
                   "in":"query",
                   "description":"The field name that should be used to sort the resulting collection. This value must exist as a property of the response object otherwise a default sort will be applied.",
                   "type":"string"
                },
                {
                   "name":"page",
                   "in":"query",
                   "description":"The page number to request. If the value is larger than the maximum pages available the last page will be returned. If a value less than 1 is specified the first page will be returned. Collection information is available in the headers.",
                   "type":"integer",
                   "format":"int32"
                },
                {
                   "name":"perPage",
                   "in":"query",
                   "description":"The number of records to include in a single page. If a value of less than 1 is specified a best effort to return the whole collection will be made. This is not guaranteed and the response headers should be checked to obtain any additional pages.",
                   "type":"integer",
                   "format":"int32"
                },
                {
                   "name":"fields",
                   "in":"query",
                   "description":"A comma separated list of property fields that should be included in the response model. These values must exist as a properties of the response object. The id field will always be returned regardless.",
                   "type":"string"
                },
                {
                   "name":"filter",
                   "in":"query",
                   "description":"A URL encoded query filter. For more information on filter formats see the documentation.",
                   "type":"string"
                }
             ],
             "responses":{
                "200":{
                   "description":"A collection (or subset) of accounts based on the callers privileges and the query parameters.",
                   "schema":{
                      "type":"array",
                      "items":{
                         "$ref":"#/definitions/account"
                      }
                   }
                },
                "400":{
                   "description":"If the request is badly formatted. For specific information see the message in the response.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                },
                "401":{
                   "description":"If the credentials used to make the call are invalid or expired.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                },
                "403":{
                   "description":"If the caller has insufficient privileges to perform the requested action.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                },
                "500":{
                   "description":"On rare occasions it is possible that a requests triggers an undefined error. These are reported automatically to the development team.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                }
             }
          },
          "post":{
             "summary":"create_account",
             "description":"Create a new account with a root user. Both actions are considered to be part of the same atomic operation. If either fail the request will return an error and neither resource will be created.",
             "tags":[
                "account"
             ],
             "operationId":"create_account",
             "produces":[
                "application/json"
             ],
             "consumes":[
                "application/json"
             ],
             "responses":{
                "201":{
                   "description":"The created `new_account` containing both the root user and the account. These will include the auto generated id.",
                   "schema":{
                      "$ref":"#/definitions/new_account"
                   }
                },
                "400":{
                   "description":"If the request is badly formatted. For specific information see the message in the response.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                },
                "401":{
                   "description":"If the credentials used to make the call are invalid or expired.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                },
                "403":{
                   "description":"If the caller has insufficient privileges to perform the requested action.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                },
                "500":{
                   "description":"On rare occasions it is possible that a requests triggers an undefined error. These are reported automatically to the development team.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                }
             },
             "parameters":[
                {
                   "name":"authorization",
                   "in":"header",
                   "description":"Due to the limitations of the Open API 2 specification authorization headers are supplied on a per function basis. The acceptable formats for this header are `Bearer <session_id>` where `<session_id>` is replaced by the session id or `Digest <api_key_signature>` where `<api_key_signature>` is replaced by the API key signature.",
                   "required":true,
                   "type":"string"
                },
                {
                   "in":"body",
                   "name":"body",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/new_account"
                   }
                }
             ]
          }
       },
       "/accounts/{accountId}":{
          "get":{
             "summary":"get_account",
             "description":"Retrieve a specific account by its id.",
             "tags":[
                "account"
             ],
             "operationId":"get_account",
             "produces":[
                "application/json"
             ],
             "parameters":[
                {
                   "name":"authorization",
                   "in":"header",
                   "description":"Due to the limitations of the Open API 2 specification authorization headers are supplied on a per function basis. The acceptable formats for this header are `Bearer <session_id>` where `<session_id>` is replaced by the session id or `Digest <api_key_signature>` where `<api_key_signature>` is replaced by the API key signature.",
                   "required":true,
                   "type":"string"
                },
                {
                   "name":"fields",
                   "in":"query",
                   "description":"A comma separated list of property fields that should be included in the response model. These values must exist as a properties of the response object. The id field will always be returned regardless.",
                   "type":"string"
                },
                {
                   "name":"accountId",
                   "in":"path",
                   "description":"The id of the account.",
                   "required":true,
                   "type":"string"
                }
             ],
             "responses":{
                "200":{
                   "description":"The requested account.",
                   "schema":{
                      "$ref":"#/definitions/account"
                   }
                },
                "400":{
                   "description":"If the request is badly formatted. For specific information see the message in the response.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                },
                "401":{
                   "description":"If the credentials used to make the call are invalid or expired.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                },
                "403":{
                   "description":"If the caller has insufficient privileges to perform the requested action.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                },
                "404":{
                   "description":"If the resource with the specified id does not exist.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                },
                "500":{
                   "description":"On rare occasions it is possible that a requests triggers an undefined error. These are reported automatically to the development team.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                }
             }
          },
          "delete":{
             "summary":"delete_account",
             "description":"Delete an account along with all its associated resource and users.",
             "tags":[
                "account"
             ],
             "operationId":"delete_account",
             "responses":{
                "204":{
                   "description":"The account was successfully deleted."
                },
                "400":{
                   "description":"If the request is badly formatted. For specific information see the message in the response.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                },
                "401":{
                   "description":"If the credentials used to make the call are invalid or expired.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                },
                "403":{
                   "description":"If the caller has insufficient privileges to perform the requested action.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                },
                "404":{
                   "description":"If the resource with the specified id does not exist.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                },
                "500":{
                   "description":"On rare occasions it is possible that a requests triggers an undefined error. These are reported automatically to the development team.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                }
             },
             "parameters":[
                {
                   "name":"authorization",
                   "in":"header",
                   "description":"Due to the limitations of the Open API 2 specification authorization headers are supplied on a per function basis. The acceptable formats for this header are `Bearer <session_id>` where `<session_id>` is replaced by the session id or `Digest <api_key_signature>` where `<api_key_signature>` is replaced by the API key signature.",
                   "required":true,
                   "type":"string"
                },
                {
                   "name":"accountId",
                   "in":"path",
                   "description":"The id of the account.",
                   "required":true,
                   "type":"string"
                }
             ]
          },
          "patch":{
             "summary":"modify_account",
             "description":"Modify an account. Only supplied properties that differ from the existing will be patched.",
             "tags":[
                "account"
             ],
             "operationId":"modify_account",
             "produces":[
                "application/json"
             ],
             "consumes":[
                "application/json"
             ],
             "responses":{
                "201":{
                   "description":"The complete modified `account`.",
                   "schema":{
                      "$ref":"#/definitions/account"
                   }
                },
                "400":{
                   "description":"If the request is badly formatted. For specific information see the message in the response.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                },
                "401":{
                   "description":"If the credentials used to make the call are invalid or expired.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                },
                "403":{
                   "description":"If the caller has insufficient privileges to perform the requested action.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                },
                "500":{
                   "description":"On rare occasions it is possible that a requests triggers an undefined error. These are reported automatically to the development team.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                }
             },
             "parameters":[
                {
                   "name":"authorization",
                   "in":"header",
                   "description":"Due to the limitations of the Open API 2 specification authorization headers are supplied on a per function basis. The acceptable formats for this header are `Bearer <session_id>` where `<session_id>` is replaced by the session id or `Digest <api_key_signature>` where `<api_key_signature>` is replaced by the API key signature.",
                   "required":true,
                   "type":"string"
                },
                {
                   "name":"accountId",
                   "in":"path",
                   "description":"The id of the account.",
                   "required":true,
                   "type":"string"
                },
                {
                   "in":"body",
                   "name":"body",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/account"
                   }
                }
             ]
          }
       },
       "/accounts/{accountId}/datas":{
          "put":{
             "summary":"update_account_data",
             "description":"Update an account data with a new one. The operation is idempotent and the entire model is replaced. To set the data object as empty you must put an object with a single empty KVP: { \"\": [] }",
             "tags":[
                "account"
             ],
             "operationId":"update_account_data",
             "produces":[
                "application/json"
             ],
             "consumes":[
                "application/json"
             ],
             "responses":{
                "201":{
                   "description":"The complete modified `data`.",
                   "schema":{
                      "$ref":"#/definitions/data"
                   }
                },
                "400":{
                   "description":"If the request is badly formatted. For specific information see the message in the response.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                },
                "401":{
                   "description":"If the credentials used to make the call are invalid or expired.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                },
                "403":{
                   "description":"If the caller has insufficient privileges to perform the requested action.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                },
                "500":{
                   "description":"On rare occasions it is possible that a requests triggers an undefined error. These are reported automatically to the development team.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                }
             },
             "parameters":[
                {
                   "name":"authorization",
                   "in":"header",
                   "description":"Due to the limitations of the Open API 2 specification authorization headers are supplied on a per function basis. The acceptable formats for this header are `Bearer <session_id>` where `<session_id>` is replaced by the session id or `Digest <api_key_signature>` where `<api_key_signature>` is replaced by the API key signature.",
                   "required":true,
                   "type":"string"
                },
                {
                   "name":"accountId",
                   "in":"path",
                   "description":"The id of the account.",
                   "required":true,
                   "type":"string"
                },
                {
                   "in":"body",
                   "name":"body",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/data"
                   }
                }
             ]
          }
       },
       "/accounts/{accountId}/users":{
          "get":{
             "summary":"get_account_users",
             "description":"Retrieve a collection of account users.",
             "tags":[
                "account",
                "user"
             ],
             "operationId":"get_account_users",
             "produces":[
                "application/json"
             ],
             "parameters":[
                {
                   "name":"authorization",
                   "in":"header",
                   "description":"Due to the limitations of the Open API 2 specification authorization headers are supplied on a per function basis. The acceptable formats for this header are `Bearer <session_id>` where `<session_id>` is replaced by the session id or `Digest <api_key_signature>` where `<api_key_signature>` is replaced by the API key signature.",
                   "required":true,
                   "type":"string"
                },
                {
                   "name":"sort",
                   "in":"query",
                   "description":"The field name that should be used to sort the resulting collection. This value must exist as a property of the response object otherwise a default sort will be applied.",
                   "type":"string"
                },
                {
                   "name":"page",
                   "in":"query",
                   "description":"The page number to request. If the value is larger than the maximum pages available the last page will be returned. If a value less than 1 is specified the first page will be returned. Collection information is available in the headers.",
                   "type":"integer",
                   "format":"int32"
                },
                {
                   "name":"perPage",
                   "in":"query",
                   "description":"The number of records to include in a single page. If a value of less than 1 is specified a best effort to return the whole collection will be made. This is not guaranteed and the response headers should be checked to obtain any additional pages.",
                   "type":"integer",
                   "format":"int32"
                },
                {
                   "name":"fields",
                   "in":"query",
                   "description":"A comma separated list of property fields that should be included in the response model. These values must exist as a properties of the response object. The id field will always be returned regardless.",
                   "type":"string"
                },
                {
                   "name":"filter",
                   "in":"query",
                   "description":"A URL encoded query filter. For more information on filter formats see the documentation.",
                   "type":"string"
                },
                {
                   "name":"accountId",
                   "in":"path",
                   "description":"The id of the account.",
                   "required":true,
                   "type":"string"
                }
             ],
             "responses":{
                "200":{
                   "description":"A collection (or subset) of accounts based on the callers privileges and the query parameters.",
                   "schema":{
                      "type":"array",
                      "items":{
                         "$ref":"#/definitions/user"
                      }
                   }
                },
                "400":{
                   "description":"If the request is badly formatted. For specific information see the message in the response.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                },
                "401":{
                   "description":"If the credentials used to make the call are invalid or expired.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                },
                "403":{
                   "description":"If the caller has insufficient privileges to perform the requested action.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                },
                "500":{
                   "description":"On rare occasions it is possible that a requests triggers an undefined error. These are reported automatically to the development team.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                }
             }
          }
       },
       "/users":{
          "get":{
             "summary":"get_users",
             "description":"Retrieve a collection of users.",
             "tags":[
                "user"
             ],
             "operationId":"get_users",
             "produces":[
                "application/json"
             ],
             "parameters":[
                {
                   "name":"authorization",
                   "in":"header",
                   "description":"Due to the limitations of the Open API 2 specification authorization headers are supplied on a per function basis. The acceptable formats for this header are `Bearer <session_id>` where `<session_id>` is replaced by the session id or `Digest <api_key_signature>` where `<api_key_signature>` is replaced by the API key signature.",
                   "required":true,
                   "type":"string"
                },
                {
                   "name":"sort",
                   "in":"query",
                   "description":"The field name that should be used to sort the resulting collection. This value must exist as a property of the response object otherwise a default sort will be applied.",
                   "type":"string"
                },
                {
                   "name":"page",
                   "in":"query",
                   "description":"The page number to request. If the value is larger than the maximum pages available the last page will be returned. If a value less than 1 is specified the first page will be returned. Collection information is available in the headers.",
                   "type":"integer",
                   "format":"int32"
                },
                {
                   "name":"perPage",
                   "in":"query",
                   "description":"The number of records to include in a single page. If a value of less than 1 is specified a best effort to return the whole collection will be made. This is not guaranteed and the response headers should be checked to obtain any additional pages.",
                   "type":"integer",
                   "format":"int32"
                },
                {
                   "name":"fields",
                   "in":"query",
                   "description":"A comma separated list of property fields that should be included in the response model. These values must exist as a properties of the response object. The id field will always be returned regardless.",
                   "type":"string"
                },
                {
                   "name":"filter",
                   "in":"query",
                   "description":"A URL encoded query filter. For more information on filter formats see the documentation.",
                   "type":"string"
                }
             ],
             "responses":{
                "200":{
                   "description":"A collection (or subset) of users based on the callers privileges and the query parameters.",
                   "schema":{
                      "type":"array",
                      "items":{
                         "$ref":"#/definitions/user"
                      }
                   }
                },
                "400":{
                   "description":"If the request is badly formatted. For specific information see the message in the response.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                },
                "401":{
                   "description":"If the credentials used to make the call are invalid or expired.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                },
                "403":{
                   "description":"If the caller has insufficient privileges to perform the requested action.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                },
                "500":{
                   "description":"On rare occasions it is possible that a requests triggers an undefined error. These are reported automatically to the development team.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                }
             }
          },
          "post":{
             "summary":"create_user",
             "description":"Create a new user.",
             "tags":[
                "user"
             ],
             "operationId":"create_user",
             "produces":[
                "application/json"
             ],
             "consumes":[
                "application/json"
             ],
             "responses":{
                "201":{
                   "description":"The created `user` including the auto generated id.",
                   "schema":{
                      "$ref":"#/definitions/user"
                   }
                },
                "400":{
                   "description":"If the request is badly formatted. For specific information see the message in the response.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                },
                "401":{
                   "description":"If the credentials used to make the call are invalid or expired.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                },
                "403":{
                   "description":"If the caller has insufficient privileges to perform the requested action.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                },
                "500":{
                   "description":"On rare occasions it is possible that a requests triggers an undefined error. These are reported automatically to the development team.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                }
             },
             "parameters":[
                {
                   "name":"authorization",
                   "in":"header",
                   "description":"Due to the limitations of the Open API 2 specification authorization headers are supplied on a per function basis. The acceptable formats for this header are `Bearer <session_id>` where `<session_id>` is replaced by the session id or `Digest <api_key_signature>` where `<api_key_signature>` is replaced by the API key signature.",
                   "required":true,
                   "type":"string"
                },
                {
                   "in":"body",
                   "name":"body",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/user"
                   }
                }
             ]
          }
       },
       "/users/{userId}":{
          "get":{
             "summary":"get_user",
             "description":"Retrieve a specific user by its id.",
             "tags":[
                "user"
             ],
             "operationId":"get_user",
             "produces":[
                "application/json"
             ],
             "parameters":[
                {
                   "name":"authorization",
                   "in":"header",
                   "description":"Due to the limitations of the Open API 2 specification authorization headers are supplied on a per function basis. The acceptable formats for this header are `Bearer <session_id>` where `<session_id>` is replaced by the session id or `Digest <api_key_signature>` where `<api_key_signature>` is replaced by the API key signature.",
                   "required":true,
                   "type":"string"
                },
                {
                   "name":"fields",
                   "in":"query",
                   "description":"A comma separated list of property fields that should be included in the response model. These values must exist as a properties of the response object. The id field will always be returned regardless.",
                   "type":"string"
                },
                {
                   "name":"userId",
                   "in":"path",
                   "description":"The id of the user.",
                   "required":true,
                   "type":"string"
                }
             ],
             "responses":{
                "200":{
                   "description":"The requested user.",
                   "schema":{
                      "$ref":"#/definitions/user"
                   }
                },
                "400":{
                   "description":"If the request is badly formatted. For specific information see the message in the response.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                },
                "401":{
                   "description":"If the credentials used to make the call are invalid or expired.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                },
                "403":{
                   "description":"If the caller has insufficient privileges to perform the requested action.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                },
                "404":{
                   "description":"If the resource with the specified id does not exist.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                },
                "500":{
                   "description":"On rare occasions it is possible that a requests triggers an undefined error. These are reported automatically to the development team.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                }
             }
          },
          "delete":{
             "summary":"delete_user",
             "description":"Delete a user.",
             "tags":[
                "user"
             ],
             "operationId":"delete_user",
             "responses":{
                "204":{
                   "description":"The user was successfully deleted."
                },
                "400":{
                   "description":"If the request is badly formatted. For specific information see the message in the response.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                },
                "401":{
                   "description":"If the credentials used to make the call are invalid or expired.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                },
                "403":{
                   "description":"If the caller has insufficient privileges to perform the requested action.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                },
                "404":{
                   "description":"If the resource with the specified id does not exist.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                },
                "500":{
                   "description":"On rare occasions it is possible that a requests triggers an undefined error. These are reported automatically to the development team.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                }
             },
             "parameters":[
                {
                   "name":"authorization",
                   "in":"header",
                   "description":"Due to the limitations of the Open API 2 specification authorization headers are supplied on a per function basis. The acceptable formats for this header are `Bearer <session_id>` where `<session_id>` is replaced by the session id or `Digest <api_key_signature>` where `<api_key_signature>` is replaced by the API key signature.",
                   "required":true,
                   "type":"string"
                },
                {
                   "name":"userId",
                   "in":"path",
                   "description":"The id of the user.",
                   "required":true,
                   "type":"string"
                }
             ]
          },
          "patch":{
             "summary":"modify_user",
             "description":"Modify a user. Only supplied properties that differ from the existing will be patched. Note that groups, roles and data have separate functions. Including or omitting them from this function will have no effect.",
             "tags":[
                "user"
             ],
             "operationId":"modify_user",
             "produces":[
                "application/json"
             ],
             "consumes":[
                "application/json"
             ],
             "responses":{
                "201":{
                   "description":"The complete modified `user`.",
                   "schema":{
                      "$ref":"#/definitions/user"
                   }
                },
                "400":{
                   "description":"If the request is badly formatted. For specific information see the message in the response.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                },
                "401":{
                   "description":"If the credentials used to make the call are invalid or expired.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                },
                "403":{
                   "description":"If the caller has insufficient privileges to perform the requested action.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                },
                "500":{
                   "description":"On rare occasions it is possible that a requests triggers an undefined error. These are reported automatically to the development team.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                }
             },
             "parameters":[
                {
                   "name":"authorization",
                   "in":"header",
                   "description":"Due to the limitations of the Open API 2 specification authorization headers are supplied on a per function basis. The acceptable formats for this header are `Bearer <session_id>` where `<session_id>` is replaced by the session id or `Digest <api_key_signature>` where `<api_key_signature>` is replaced by the API key signature.",
                   "required":true,
                   "type":"string"
                },
                {
                   "name":"userId",
                   "in":"path",
                   "description":"The id of the user.",
                   "required":true,
                   "type":"string"
                },
                {
                   "in":"body",
                   "name":"body",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/user"
                   }
                }
             ]
          }
       },
       "/users/{userId}/datas":{
          "put":{
             "summary":"update_user_data",
             "description":"Update a user data with a new one. The operation is idempotent and the entire model is replaced. To set the data object as empty you must put an object with a single empty KVP: { \"\": [] }",
             "tags":[
                "user"
             ],
             "operationId":"update_user_data",
             "produces":[
                "application/json"
             ],
             "consumes":[
                "application/json"
             ],
             "responses":{
                "201":{
                   "description":"The complete modified `data`.",
                   "schema":{
                      "$ref":"#/definitions/data"
                   }
                },
                "400":{
                   "description":"If the request is badly formatted. For specific information see the message in the response.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                },
                "401":{
                   "description":"If the credentials used to make the call are invalid or expired.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                },
                "403":{
                   "description":"If the caller has insufficient privileges to perform the requested action.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                },
                "500":{
                   "description":"On rare occasions it is possible that a requests triggers an undefined error. These are reported automatically to the development team.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                }
             },
             "parameters":[
                {
                   "name":"authorization",
                   "in":"header",
                   "description":"Due to the limitations of the Open API 2 specification authorization headers are supplied on a per function basis. The acceptable formats for this header are `Bearer <session_id>` where `<session_id>` is replaced by the session id or `Digest <api_key_signature>` where `<api_key_signature>` is replaced by the API key signature.",
                   "required":true,
                   "type":"string"
                },
                {
                   "name":"userId",
                   "in":"path",
                   "description":"The id of the user.",
                   "required":true,
                   "type":"string"
                },
                {
                   "in":"body",
                   "name":"body",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/data"
                   }
                }
             ]
          }
       },
       "/users/{userId}/roles":{
          "get":{
             "summary":"get_user_roles",
             "description":"Retrieve a collection of user roles.",
             "tags":[
                "user",
                "role"
             ],
             "operationId":"get_user_roles",
             "produces":[
                "application/json"
             ],
             "parameters":[
                {
                   "name":"authorization",
                   "in":"header",
                   "description":"Due to the limitations of the Open API 2 specification authorization headers are supplied on a per function basis. The acceptable formats for this header are `Bearer <session_id>` where `<session_id>` is replaced by the session id or `Digest <api_key_signature>` where `<api_key_signature>` is replaced by the API key signature.",
                   "required":true,
                   "type":"string"
                },
                {
                   "name":"sort",
                   "in":"query",
                   "description":"The field name that should be used to sort the resulting collection. This value must exist as a property of the response object otherwise a default sort will be applied.",
                   "type":"string"
                },
                {
                   "name":"page",
                   "in":"query",
                   "description":"The page number to request. If the value is larger than the maximum pages available the last page will be returned. If a value less than 1 is specified the first page will be returned. Collection information is available in the headers.",
                   "type":"integer",
                   "format":"int32"
                },
                {
                   "name":"perPage",
                   "in":"query",
                   "description":"The number of records to include in a single page. If a value of less than 1 is specified a best effort to return the whole collection will be made. This is not guaranteed and the response headers should be checked to obtain any additional pages.",
                   "type":"integer",
                   "format":"int32"
                },
                {
                   "name":"fields",
                   "in":"query",
                   "description":"A comma separated list of property fields that should be included in the response model. These values must exist as a properties of the response object. The id field will always be returned regardless.",
                   "type":"string"
                },
                {
                   "name":"filter",
                   "in":"query",
                   "description":"A URL encoded query filter. For more information on filter formats see the documentation.",
                   "type":"string"
                },
                {
                   "name":"userId",
                   "in":"path",
                   "description":"The id of the user.",
                   "required":true,
                   "type":"string"
                }
             ],
             "responses":{
                "200":{
                   "description":"A collection (or subset) of user roles based on the callers privileges and the query parameters.",
                   "schema":{
                      "type":"array",
                      "items":{
                         "$ref":"#/definitions/role"
                      }
                   }
                },
                "400":{
                   "description":"If the request is badly formatted. For specific information see the message in the response.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                },
                "401":{
                   "description":"If the credentials used to make the call are invalid or expired.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                },
                "403":{
                   "description":"If the caller has insufficient privileges to perform the requested action.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                },
                "500":{
                   "description":"On rare occasions it is possible that a requests triggers an undefined error. These are reported automatically to the development team.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                }
             }
          }
       },
       "/users/{userId}/roles/{roleId}":{
          "put":{
             "summary":"add_role_to_user",
             "description":"Add a role to a user. Note that this function does not create the user or the role. Both must already exist. This function simply creates a binding between them.",
             "tags":[
                "user",
                "role"
             ],
             "operationId":"add_role_to_user",
             "produces":[
                "application/json"
             ],
             "responses":{
                "201":{
                   "description":"A complete collection of all the role ids associated to the user after the function is executed.",
                   "schema":{
                      "type":"array",
                      "items":{
                         "type":"string"
                      }
                   }
                },
                "400":{
                   "description":"If the request is badly formatted. For specific information see the message in the response.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                },
                "401":{
                   "description":"If the credentials used to make the call are invalid or expired.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                },
                "403":{
                   "description":"If the caller has insufficient privileges to perform the requested action.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                },
                "404":{
                   "description":"If any of the resources do not exist.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                },
                "500":{
                   "description":"On rare occasions it is possible that a requests triggers an undefined error. These are reported automatically to the development team.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                }
             },
             "parameters":[
                {
                   "name":"authorization",
                   "in":"header",
                   "description":"Due to the limitations of the Open API 2 specification authorization headers are supplied on a per function basis. The acceptable formats for this header are `Bearer <session_id>` where `<session_id>` is replaced by the session id or `Digest <api_key_signature>` where `<api_key_signature>` is replaced by the API key signature.",
                   "required":true,
                   "type":"string"
                },
                {
                   "name":"userId",
                   "in":"path",
                   "description":"The id of the user.",
                   "required":true,
                   "type":"string"
                },
                {
                   "name":"roleId",
                   "in":"path",
                   "description":"The id of the role.",
                   "required":true,
                   "type":"string"
                }
             ]
          },
          "delete":{
             "summary":"remove_role_from_user",
             "description":"Removes a role from a user. Note that this function does not delete the role, it simply removes the binding between them.",
             "tags":[
                "user",
                "role"
             ],
             "operationId":"remove_role_from_user",
             "produces":[
                "application/json"
             ],
             "responses":{
                "201":{
                   "description":"A complete collection of all the role ids associated to the user after the function is executed.",
                   "schema":{
                      "type":"array",
                      "items":{
                         "type":"string"
                      }
                   }
                },
                "400":{
                   "description":"If the request is badly formatted. For specific information see the message in the response.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                },
                "401":{
                   "description":"If the credentials used to make the call are invalid or expired.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                },
                "403":{
                   "description":"If the caller has insufficient privileges to perform the requested action.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                },
                "404":{
                   "description":"If any of the resources do not exist.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                },
                "500":{
                   "description":"On rare occasions it is possible that a requests triggers an undefined error. These are reported automatically to the development team.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                }
             },
             "parameters":[
                {
                   "name":"authorization",
                   "in":"header",
                   "description":"Due to the limitations of the Open API 2 specification authorization headers are supplied on a per function basis. The acceptable formats for this header are `Bearer <session_id>` where `<session_id>` is replaced by the session id or `Digest <api_key_signature>` where `<api_key_signature>` is replaced by the API key signature.",
                   "required":true,
                   "type":"string"
                },
                {
                   "name":"userId",
                   "in":"path",
                   "description":"The id of the user.",
                   "required":true,
                   "type":"string"
                },
                {
                   "name":"roleId",
                   "in":"path",
                   "description":"The id of the role.",
                   "required":true,
                   "type":"string"
                }
             ]
          }
       },
       "/users/{userId}/groups":{
          "get":{
             "summary":"get_user_groups",
             "description":"Retrieve a collection of user groups.",
             "tags":[
                "user",
                "group"
             ],
             "operationId":"get_user_groups",
             "produces":[
                "application/json"
             ],
             "parameters":[
                {
                   "name":"authorization",
                   "in":"header",
                   "description":"Due to the limitations of the Open API 2 specification authorization headers are supplied on a per function basis. The acceptable formats for this header are `Bearer <session_id>` where `<session_id>` is replaced by the session id or `Digest <api_key_signature>` where `<api_key_signature>` is replaced by the API key signature.",
                   "required":true,
                   "type":"string"
                },
                {
                   "name":"sort",
                   "in":"query",
                   "description":"The field name that should be used to sort the resulting collection. This value must exist as a property of the response object otherwise a default sort will be applied.",
                   "type":"string"
                },
                {
                   "name":"page",
                   "in":"query",
                   "description":"The page number to request. If the value is larger than the maximum pages available the last page will be returned. If a value less than 1 is specified the first page will be returned. Collection information is available in the headers.",
                   "type":"integer",
                   "format":"int32"
                },
                {
                   "name":"perPage",
                   "in":"query",
                   "description":"The number of records to include in a single page. If a value of less than 1 is specified a best effort to return the whole collection will be made. This is not guaranteed and the response headers should be checked to obtain any additional pages.",
                   "type":"integer",
                   "format":"int32"
                },
                {
                   "name":"fields",
                   "in":"query",
                   "description":"A comma separated list of property fields that should be included in the response model. These values must exist as a properties of the response object. The id field will always be returned regardless.",
                   "type":"string"
                },
                {
                   "name":"filter",
                   "in":"query",
                   "description":"A URL encoded query filter. For more information on filter formats see the documentation.",
                   "type":"string"
                },
                {
                   "name":"userId",
                   "in":"path",
                   "description":"The id of the user.",
                   "required":true,
                   "type":"string"
                }
             ],
             "responses":{
                "200":{
                   "description":"A collection (or subset) of user groups based on the callers privileges and the query parameters.",
                   "schema":{
                      "type":"array",
                      "items":{
                         "$ref":"#/definitions/group"
                      }
                   }
                },
                "400":{
                   "description":"If the request is badly formatted. For specific information see the message in the response.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                },
                "401":{
                   "description":"If the credentials used to make the call are invalid or expired.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                },
                "403":{
                   "description":"If the caller has insufficient privileges to perform the requested action.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                },
                "500":{
                   "description":"On rare occasions it is possible that a requests triggers an undefined error. These are reported automatically to the development team.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                }
             }
          }
       },
       "/users/{userId}/groups/{groupId}":{
          "put":{
             "summary":"add_group_to_user",
             "description":"Add a group to a user. Note that this function does not create the group or the user. Both must already exist. This function simply creates a binding between them.",
             "tags":[
                "user",
                "group"
             ],
             "operationId":"add_group_to_user",
             "produces":[
                "application/json"
             ],
             "responses":{
                "201":{
                   "description":"A complete collection of all the group ids associated to the user after the function is executed.",
                   "schema":{
                      "type":"array",
                      "items":{
                         "type":"string"
                      }
                   }
                },
                "400":{
                   "description":"If the request is badly formatted. For specific information see the message in the response.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                },
                "401":{
                   "description":"If the credentials used to make the call are invalid or expired.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                },
                "403":{
                   "description":"If the caller has insufficient privileges to perform the requested action.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                },
                "404":{
                   "description":"If any of the resources do not exist.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                },
                "500":{
                   "description":"On rare occasions it is possible that a requests triggers an undefined error. These are reported automatically to the development team.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                }
             },
             "parameters":[
                {
                   "name":"authorization",
                   "in":"header",
                   "description":"Due to the limitations of the Open API 2 specification authorization headers are supplied on a per function basis. The acceptable formats for this header are `Bearer <session_id>` where `<session_id>` is replaced by the session id or `Digest <api_key_signature>` where `<api_key_signature>` is replaced by the API key signature.",
                   "required":true,
                   "type":"string"
                },
                {
                   "name":"userId",
                   "in":"path",
                   "description":"The id of the user.",
                   "required":true,
                   "type":"string"
                },
                {
                   "name":"groupId",
                   "in":"path",
                   "description":"The id of the group.",
                   "required":true,
                   "type":"string"
                }
             ]
          },
          "delete":{
             "summary":"remove_group_from_user",
             "description":"Removes a group from a user. Note that this function does not delete the group, it simply removes the binding between them.",
             "tags":[
                "user",
                "group"
             ],
             "operationId":"remove_group_from_user",
             "produces":[
                "application/json"
             ],
             "responses":{
                "201":{
                   "description":"A complete collection of all the group ids associated to the user after the function is executed.",
                   "schema":{
                      "type":"array",
                      "items":{
                         "type":"string"
                      }
                   }
                },
                "400":{
                   "description":"If the request is badly formatted. For specific information see the message in the response.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                },
                "401":{
                   "description":"If the credentials used to make the call are invalid or expired.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                },
                "403":{
                   "description":"If the caller has insufficient privileges to perform the requested action.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                },
                "404":{
                   "description":"If any of the resources do not exist.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                },
                "500":{
                   "description":"On rare occasions it is possible that a requests triggers an undefined error. These are reported automatically to the development team.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                }
             },
             "parameters":[
                {
                   "name":"authorization",
                   "in":"header",
                   "description":"Due to the limitations of the Open API 2 specification authorization headers are supplied on a per function basis. The acceptable formats for this header are `Bearer <session_id>` where `<session_id>` is replaced by the session id or `Digest <api_key_signature>` where `<api_key_signature>` is replaced by the API key signature.",
                   "required":true,
                   "type":"string"
                },
                {
                   "name":"userId",
                   "in":"path",
                   "description":"The id of the user.",
                   "required":true,
                   "type":"string"
                },
                {
                   "name":"groupId",
                   "in":"path",
                   "description":"The id of the group.",
                   "required":true,
                   "type":"string"
                }
             ]
          }
       },
       "/groups":{
          "get":{
             "summary":"get_groups",
             "description":"Retrieve a collection of groups.",
             "tags":[
                "group"
             ],
             "operationId":"get_groups",
             "produces":[
                "application/json"
             ],
             "parameters":[
                {
                   "name":"authorization",
                   "in":"header",
                   "description":"Due to the limitations of the Open API 2 specification authorization headers are supplied on a per function basis. The acceptable formats for this header are `Bearer <session_id>` where `<session_id>` is replaced by the session id or `Digest <api_key_signature>` where `<api_key_signature>` is replaced by the API key signature.",
                   "required":true,
                   "type":"string"
                },
                {
                   "name":"sort",
                   "in":"query",
                   "description":"The field name that should be used to sort the resulting collection. This value must exist as a property of the response object otherwise a default sort will be applied.",
                   "type":"string"
                },
                {
                   "name":"page",
                   "in":"query",
                   "description":"The page number to request. If the value is larger than the maximum pages available the last page will be returned. If a value less than 1 is specified the first page will be returned. Collection information is available in the headers.",
                   "type":"integer",
                   "format":"int32"
                },
                {
                   "name":"perPage",
                   "in":"query",
                   "description":"The number of records to include in a single page. If a value of less than 1 is specified a best effort to return the whole collection will be made. This is not guaranteed and the response headers should be checked to obtain any additional pages.",
                   "type":"integer",
                   "format":"int32"
                },
                {
                   "name":"fields",
                   "in":"query",
                   "description":"A comma separated list of property fields that should be included in the response model. These values must exist as a properties of the response object. The id field will always be returned regardless.",
                   "type":"string"
                },
                {
                   "name":"filter",
                   "in":"query",
                   "description":"A URL encoded query filter. For more information on filter formats see the documentation.",
                   "type":"string"
                }
             ],
             "responses":{
                "200":{
                   "description":"A collection (or subset) of groups based on the callers privileges and the query parameters.",
                   "schema":{
                      "type":"array",
                      "items":{
                         "$ref":"#/definitions/group"
                      }
                   }
                },
                "400":{
                   "description":"If the request is badly formatted. For specific information see the message in the response.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                },
                "401":{
                   "description":"If the credentials used to make the call are invalid or expired.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                },
                "403":{
                   "description":"If the caller has insufficient privileges to perform the requested action.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                },
                "500":{
                   "description":"On rare occasions it is possible that a requests triggers an undefined error. These are reported automatically to the development team.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                }
             }
          },
          "post":{
             "summary":"create_group",
             "description":"Create a new group.",
             "tags":[
                "group"
             ],
             "operationId":"create_group",
             "produces":[
                "application/json"
             ],
             "consumes":[
                "application/json"
             ],
             "responses":{
                "201":{
                   "description":"The created `group` including the auto generated id.",
                   "schema":{
                      "$ref":"#/definitions/group"
                   }
                },
                "400":{
                   "description":"If the request is badly formatted. For specific information see the message in the response.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                },
                "401":{
                   "description":"If the credentials used to make the call are invalid or expired.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                },
                "403":{
                   "description":"If the caller has insufficient privileges to perform the requested action.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                },
                "500":{
                   "description":"On rare occasions it is possible that a requests triggers an undefined error. These are reported automatically to the development team.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                }
             },
             "parameters":[
                {
                   "name":"authorization",
                   "in":"header",
                   "description":"Due to the limitations of the Open API 2 specification authorization headers are supplied on a per function basis. The acceptable formats for this header are `Bearer <session_id>` where `<session_id>` is replaced by the session id or `Digest <api_key_signature>` where `<api_key_signature>` is replaced by the API key signature.",
                   "required":true,
                   "type":"string"
                },
                {
                   "in":"body",
                   "name":"body",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/group"
                   }
                }
             ]
          }
       },
       "/groups/{groupId}":{
          "get":{
             "summary":"get_group",
             "description":"Retrieve a specific group by its id.",
             "tags":[
                "group"
             ],
             "operationId":"get_group",
             "produces":[
                "application/json"
             ],
             "parameters":[
                {
                   "name":"authorization",
                   "in":"header",
                   "description":"Due to the limitations of the Open API 2 specification authorization headers are supplied on a per function basis. The acceptable formats for this header are `Bearer <session_id>` where `<session_id>` is replaced by the session id or `Digest <api_key_signature>` where `<api_key_signature>` is replaced by the API key signature.",
                   "required":true,
                   "type":"string"
                },
                {
                   "name":"fields",
                   "in":"query",
                   "description":"A comma separated list of property fields that should be included in the response model. These values must exist as a properties of the response object. The id field will always be returned regardless.",
                   "type":"string"
                },
                {
                   "name":"groupId",
                   "in":"path",
                   "description":"The id of the group.",
                   "required":true,
                   "type":"string"
                }
             ],
             "responses":{
                "200":{
                   "description":"The requested group.",
                   "schema":{
                      "$ref":"#/definitions/group"
                   }
                },
                "400":{
                   "description":"If the request is badly formatted. For specific information see the message in the response.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                },
                "401":{
                   "description":"If the credentials used to make the call are invalid or expired.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                },
                "403":{
                   "description":"If the caller has insufficient privileges to perform the requested action.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                },
                "404":{
                   "description":"If the resource with the specified id does not exist.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                },
                "500":{
                   "description":"On rare occasions it is possible that a requests triggers an undefined error. These are reported automatically to the development team.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                }
             }
          },
          "delete":{
             "summary":"delete_group",
             "description":"Delete a group. All associated roles will be released and all linked users will lose their associated roles.",
             "tags":[
                "group"
             ],
             "operationId":"delete_group",
             "responses":{
                "204":{
                   "description":"The group was successfully deleted."
                },
                "400":{
                   "description":"If the request is badly formatted. For specific information see the message in the response.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                },
                "401":{
                   "description":"If the credentials used to make the call are invalid or expired.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                },
                "403":{
                   "description":"If the caller has insufficient privileges to perform the requested action.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                },
                "404":{
                   "description":"If the resource with the specified id does not exist.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                },
                "500":{
                   "description":"On rare occasions it is possible that a requests triggers an undefined error. These are reported automatically to the development team.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                }
             },
             "parameters":[
                {
                   "name":"authorization",
                   "in":"header",
                   "description":"Due to the limitations of the Open API 2 specification authorization headers are supplied on a per function basis. The acceptable formats for this header are `Bearer <session_id>` where `<session_id>` is replaced by the session id or `Digest <api_key_signature>` where `<api_key_signature>` is replaced by the API key signature.",
                   "required":true,
                   "type":"string"
                },
                {
                   "name":"groupId",
                   "in":"path",
                   "description":"The id of the group.",
                   "required":true,
                   "type":"string"
                }
             ]
          },
          "patch":{
             "summary":"modify_group",
             "description":"Modify a group. Only supplied properties that differ from the existing will be patched. Note that roles and data have separate functions. Including or omitting them from this function will have no effect.",
             "tags":[
                "group"
             ],
             "operationId":"modify_group",
             "produces":[
                "application/json"
             ],
             "consumes":[
                "application/json"
             ],
             "responses":{
                "201":{
                   "description":"The complete modified `group`.",
                   "schema":{
                      "$ref":"#/definitions/group"
                   }
                },
                "400":{
                   "description":"If the request is badly formatted. For specific information see the message in the response.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                },
                "401":{
                   "description":"If the credentials used to make the call are invalid or expired.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                },
                "403":{
                   "description":"If the caller has insufficient privileges to perform the requested action.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                },
                "500":{
                   "description":"On rare occasions it is possible that a requests triggers an undefined error. These are reported automatically to the development team.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                }
             },
             "parameters":[
                {
                   "name":"authorization",
                   "in":"header",
                   "description":"Due to the limitations of the Open API 2 specification authorization headers are supplied on a per function basis. The acceptable formats for this header are `Bearer <session_id>` where `<session_id>` is replaced by the session id or `Digest <api_key_signature>` where `<api_key_signature>` is replaced by the API key signature.",
                   "required":true,
                   "type":"string"
                },
                {
                   "name":"groupId",
                   "in":"path",
                   "description":"The id of the group.",
                   "required":true,
                   "type":"string"
                },
                {
                   "in":"body",
                   "name":"body",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/group"
                   }
                }
             ]
          }
       },
       "/groups/{groupId}/datas":{
          "put":{
             "summary":"update_group_data",
             "description":"Update a group data with a new one. The operation is idempotent and the entire model is replaced. To set the data object as empty you must put an object with a single empty KVP: { \"\": [] }",
             "tags":[
                "group"
             ],
             "operationId":"update_group_data",
             "produces":[
                "application/json"
             ],
             "consumes":[
                "application/json"
             ],
             "responses":{
                "201":{
                   "description":"The complete modified `data`.",
                   "schema":{
                      "$ref":"#/definitions/data"
                   }
                },
                "400":{
                   "description":"If the request is badly formatted. For specific information see the message in the response.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                },
                "401":{
                   "description":"If the credentials used to make the call are invalid or expired.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                },
                "403":{
                   "description":"If the caller has insufficient privileges to perform the requested action.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                },
                "500":{
                   "description":"On rare occasions it is possible that a requests triggers an undefined error. These are reported automatically to the development team.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                }
             },
             "parameters":[
                {
                   "name":"authorization",
                   "in":"header",
                   "description":"Due to the limitations of the Open API 2 specification authorization headers are supplied on a per function basis. The acceptable formats for this header are `Bearer <session_id>` where `<session_id>` is replaced by the session id or `Digest <api_key_signature>` where `<api_key_signature>` is replaced by the API key signature.",
                   "required":true,
                   "type":"string"
                },
                {
                   "name":"groupId",
                   "in":"path",
                   "description":"The id of the group.",
                   "required":true,
                   "type":"string"
                },
                {
                   "in":"body",
                   "name":"body",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/data"
                   }
                }
             ]
          }
       },
       "/groups/{groupId}/roles":{
          "get":{
             "summary":"get_group_roles",
             "description":"Retrieve a collection of group roles.",
             "tags":[
                "group",
                "role"
             ],
             "operationId":"get_group_roles",
             "produces":[
                "application/json"
             ],
             "parameters":[
                {
                   "name":"authorization",
                   "in":"header",
                   "description":"Due to the limitations of the Open API 2 specification authorization headers are supplied on a per function basis. The acceptable formats for this header are `Bearer <session_id>` where `<session_id>` is replaced by the session id or `Digest <api_key_signature>` where `<api_key_signature>` is replaced by the API key signature.",
                   "required":true,
                   "type":"string"
                },
                {
                   "name":"sort",
                   "in":"query",
                   "description":"The field name that should be used to sort the resulting collection. This value must exist as a property of the response object otherwise a default sort will be applied.",
                   "type":"string"
                },
                {
                   "name":"page",
                   "in":"query",
                   "description":"The page number to request. If the value is larger than the maximum pages available the last page will be returned. If a value less than 1 is specified the first page will be returned. Collection information is available in the headers.",
                   "type":"integer",
                   "format":"int32"
                },
                {
                   "name":"perPage",
                   "in":"query",
                   "description":"The number of records to include in a single page. If a value of less than 1 is specified a best effort to return the whole collection will be made. This is not guaranteed and the response headers should be checked to obtain any additional pages.",
                   "type":"integer",
                   "format":"int32"
                },
                {
                   "name":"fields",
                   "in":"query",
                   "description":"A comma separated list of property fields that should be included in the response model. These values must exist as a properties of the response object. The id field will always be returned regardless.",
                   "type":"string"
                },
                {
                   "name":"filter",
                   "in":"query",
                   "description":"A URL encoded query filter. For more information on filter formats see the documentation.",
                   "type":"string"
                },
                {
                   "name":"groupId",
                   "in":"path",
                   "description":"The id of the group.",
                   "required":true,
                   "type":"string"
                }
             ],
             "responses":{
                "200":{
                   "description":"A collection (or subset) of group roles based on the callers privileges and the query parameters.",
                   "schema":{
                      "type":"array",
                      "items":{
                         "$ref":"#/definitions/role"
                      }
                   }
                },
                "400":{
                   "description":"If the request is badly formatted. For specific information see the message in the response.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                },
                "401":{
                   "description":"If the credentials used to make the call are invalid or expired.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                },
                "403":{
                   "description":"If the caller has insufficient privileges to perform the requested action.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                },
                "500":{
                   "description":"On rare occasions it is possible that a requests triggers an undefined error. These are reported automatically to the development team.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                }
             }
          }
       },
       "/groups/{groupId}/roles/{roleId}":{
          "put":{
             "summary":"add_role_to_group",
             "description":"Add a role to a group. Note that this function does not create the group or the role. Both must already exist. This function simply creates a binding between them.",
             "tags":[
                "group",
                "role"
             ],
             "operationId":"add_role_to_group",
             "produces":[
                "application/json"
             ],
             "responses":{
                "201":{
                   "description":"A complete collection of all the role ids associated to the group after the function is executed.",
                   "schema":{
                      "type":"array",
                      "items":{
                         "type":"string"
                      }
                   }
                },
                "400":{
                   "description":"If the request is badly formatted. For specific information see the message in the response.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                },
                "401":{
                   "description":"If the credentials used to make the call are invalid or expired.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                },
                "403":{
                   "description":"If the caller has insufficient privileges to perform the requested action.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                },
                "404":{
                   "description":"If any of the resources do not exist.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                },
                "500":{
                   "description":"On rare occasions it is possible that a requests triggers an undefined error. These are reported automatically to the development team.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                }
             },
             "parameters":[
                {
                   "name":"authorization",
                   "in":"header",
                   "description":"Due to the limitations of the Open API 2 specification authorization headers are supplied on a per function basis. The acceptable formats for this header are `Bearer <session_id>` where `<session_id>` is replaced by the session id or `Digest <api_key_signature>` where `<api_key_signature>` is replaced by the API key signature.",
                   "required":true,
                   "type":"string"
                },
                {
                   "name":"groupId",
                   "in":"path",
                   "description":"The id of the group.",
                   "required":true,
                   "type":"string"
                },
                {
                   "name":"roleId",
                   "in":"path",
                   "description":"The id of the role.",
                   "required":true,
                   "type":"string"
                }
             ]
          },
          "delete":{
             "summary":"remove_role_from_group",
             "description":"Removes a role from a group. Note that this function does not delete the role, it simply removes the binding between them.",
             "tags":[
                "group",
                "role"
             ],
             "operationId":"remove_role_from_group",
             "produces":[
                "application/json"
             ],
             "responses":{
                "201":{
                   "description":"A complete collection of all the role ids associated to the group after the function is executed.",
                   "schema":{
                      "type":"array",
                      "items":{
                         "type":"string"
                      }
                   }
                },
                "400":{
                   "description":"If the request is badly formatted. For specific information see the message in the response.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                },
                "401":{
                   "description":"If the credentials used to make the call are invalid or expired.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                },
                "403":{
                   "description":"If the caller has insufficient privileges to perform the requested action.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                },
                "404":{
                   "description":"If any of the resources do not exist.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                },
                "500":{
                   "description":"On rare occasions it is possible that a requests triggers an undefined error. These are reported automatically to the development team.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                }
             },
             "parameters":[
                {
                   "name":"authorization",
                   "in":"header",
                   "description":"Due to the limitations of the Open API 2 specification authorization headers are supplied on a per function basis. The acceptable formats for this header are `Bearer <session_id>` where `<session_id>` is replaced by the session id or `Digest <api_key_signature>` where `<api_key_signature>` is replaced by the API key signature.",
                   "required":true,
                   "type":"string"
                },
                {
                   "name":"groupId",
                   "in":"path",
                   "description":"The id of the group.",
                   "required":true,
                   "type":"string"
                },
                {
                   "name":"roleId",
                   "in":"path",
                   "description":"The id of the role.",
                   "required":true,
                   "type":"string"
                }
             ]
          }
       },
       "/groups/{groupId}/users":{
          "get":{
             "summary":"get_group_users",
             "description":"Retrieve a collection of group users.",
             "tags":[
                "group",
                "user"
             ],
             "operationId":"get_group_users",
             "produces":[
                "application/json"
             ],
             "parameters":[
                {
                   "name":"authorization",
                   "in":"header",
                   "description":"Due to the limitations of the Open API 2 specification authorization headers are supplied on a per function basis. The acceptable formats for this header are `Bearer <session_id>` where `<session_id>` is replaced by the session id or `Digest <api_key_signature>` where `<api_key_signature>` is replaced by the API key signature.",
                   "required":true,
                   "type":"string"
                },
                {
                   "name":"sort",
                   "in":"query",
                   "description":"The field name that should be used to sort the resulting collection. This value must exist as a property of the response object otherwise a default sort will be applied.",
                   "type":"string"
                },
                {
                   "name":"page",
                   "in":"query",
                   "description":"The page number to request. If the value is larger than the maximum pages available the last page will be returned. If a value less than 1 is specified the first page will be returned. Collection information is available in the headers.",
                   "type":"integer",
                   "format":"int32"
                },
                {
                   "name":"perPage",
                   "in":"query",
                   "description":"The number of records to include in a single page. If a value of less than 1 is specified a best effort to return the whole collection will be made. This is not guaranteed and the response headers should be checked to obtain any additional pages.",
                   "type":"integer",
                   "format":"int32"
                },
                {
                   "name":"fields",
                   "in":"query",
                   "description":"A comma separated list of property fields that should be included in the response model. These values must exist as a properties of the response object. The id field will always be returned regardless.",
                   "type":"string"
                },
                {
                   "name":"filter",
                   "in":"query",
                   "description":"A URL encoded query filter. For more information on filter formats see the documentation.",
                   "type":"string"
                },
                {
                   "name":"groupId",
                   "in":"path",
                   "description":"The id of the group.",
                   "required":true,
                   "type":"string"
                }
             ],
             "responses":{
                "200":{
                   "description":"A collection (or subset) of group users based on the callers privileges and the query parameters.",
                   "schema":{
                      "type":"array",
                      "items":{
                         "$ref":"#/definitions/user"
                      }
                   }
                },
                "400":{
                   "description":"If the request is badly formatted. For specific information see the message in the response.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                },
                "401":{
                   "description":"If the credentials used to make the call are invalid or expired.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                },
                "403":{
                   "description":"If the caller has insufficient privileges to perform the requested action.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                },
                "500":{
                   "description":"On rare occasions it is possible that a requests triggers an undefined error. These are reported automatically to the development team.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                }
             }
          }
       },
       "/roles":{
          "get":{
             "summary":"get_roles",
             "description":"Retrieve a collection of roles.",
             "tags":[
                "role"
             ],
             "operationId":"get_roles",
             "produces":[
                "application/json"
             ],
             "parameters":[
                {
                   "name":"authorization",
                   "in":"header",
                   "description":"Due to the limitations of the Open API 2 specification authorization headers are supplied on a per function basis. The acceptable formats for this header are `Bearer <session_id>` where `<session_id>` is replaced by the session id or `Digest <api_key_signature>` where `<api_key_signature>` is replaced by the API key signature.",
                   "required":true,
                   "type":"string"
                },
                {
                   "name":"sort",
                   "in":"query",
                   "description":"The field name that should be used to sort the resulting collection. This value must exist as a property of the response object otherwise a default sort will be applied.",
                   "type":"string"
                },
                {
                   "name":"page",
                   "in":"query",
                   "description":"The page number to request. If the value is larger than the maximum pages available the last page will be returned. If a value less than 1 is specified the first page will be returned. Collection information is available in the headers.",
                   "type":"integer",
                   "format":"int32"
                },
                {
                   "name":"perPage",
                   "in":"query",
                   "description":"The number of records to include in a single page. If a value of less than 1 is specified a best effort to return the whole collection will be made. This is not guaranteed and the response headers should be checked to obtain any additional pages.",
                   "type":"integer",
                   "format":"int32"
                },
                {
                   "name":"fields",
                   "in":"query",
                   "description":"A comma separated list of property fields that should be included in the response model. These values must exist as a properties of the response object. The id field will always be returned regardless.",
                   "type":"string"
                },
                {
                   "name":"filter",
                   "in":"query",
                   "description":"A URL encoded query filter. For more information on filter formats see the documentation.",
                   "type":"string"
                }
             ],
             "responses":{
                "200":{
                   "description":"A collection (or subset) of roles based on the callers privileges and the query parameters.",
                   "schema":{
                      "type":"array",
                      "items":{
                         "$ref":"#/definitions/role"
                      }
                   }
                },
                "400":{
                   "description":"If the request is badly formatted. For specific information see the message in the response.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                },
                "401":{
                   "description":"If the credentials used to make the call are invalid or expired.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                },
                "403":{
                   "description":"If the caller has insufficient privileges to perform the requested action.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                },
                "500":{
                   "description":"On rare occasions it is possible that a requests triggers an undefined error. These are reported automatically to the development team.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                }
             }
          },
          "post":{
             "summary":"create_role",
             "description":"Create a new role.",
             "tags":[
                "role"
             ],
             "operationId":"create_role",
             "produces":[
                "application/json"
             ],
             "consumes":[
                "application/json"
             ],
             "responses":{
                "201":{
                   "description":"The created `role` including the auto generated id.",
                   "schema":{
                      "$ref":"#/definitions/role"
                   }
                },
                "400":{
                   "description":"If the request is badly formatted. For specific information see the message in the response.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                },
                "401":{
                   "description":"If the credentials used to make the call are invalid or expired.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                },
                "403":{
                   "description":"If the caller has insufficient privileges to perform the requested action.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                },
                "500":{
                   "description":"On rare occasions it is possible that a requests triggers an undefined error. These are reported automatically to the development team.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                }
             },
             "parameters":[
                {
                   "name":"authorization",
                   "in":"header",
                   "description":"Due to the limitations of the Open API 2 specification authorization headers are supplied on a per function basis. The acceptable formats for this header are `Bearer <session_id>` where `<session_id>` is replaced by the session id or `Digest <api_key_signature>` where `<api_key_signature>` is replaced by the API key signature.",
                   "required":true,
                   "type":"string"
                },
                {
                   "in":"body",
                   "name":"body",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/role"
                   }
                }
             ]
          }
       },
       "/roles/{roleId}":{
          "get":{
             "summary":"get_role",
             "description":"Retrieve a specific role by its id.",
             "tags":[
                "role"
             ],
             "operationId":"get_role",
             "produces":[
                "application/json"
             ],
             "parameters":[
                {
                   "name":"authorization",
                   "in":"header",
                   "description":"Due to the limitations of the Open API 2 specification authorization headers are supplied on a per function basis. The acceptable formats for this header are `Bearer <session_id>` where `<session_id>` is replaced by the session id or `Digest <api_key_signature>` where `<api_key_signature>` is replaced by the API key signature.",
                   "required":true,
                   "type":"string"
                },
                {
                   "name":"fields",
                   "in":"query",
                   "description":"A comma separated list of property fields that should be included in the response model. These values must exist as a properties of the response object. The id field will always be returned regardless.",
                   "type":"string"
                },
                {
                   "name":"roleId",
                   "in":"path",
                   "description":"The id of the role.",
                   "required":true,
                   "type":"string"
                }
             ],
             "responses":{
                "200":{
                   "description":"The requested role.",
                   "schema":{
                      "$ref":"#/definitions/role"
                   }
                },
                "400":{
                   "description":"If the request is badly formatted. For specific information see the message in the response.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                },
                "401":{
                   "description":"If the credentials used to make the call are invalid or expired.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                },
                "403":{
                   "description":"If the caller has insufficient privileges to perform the requested action.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                },
                "404":{
                   "description":"If the resource with the specified id does not exist.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                },
                "500":{
                   "description":"On rare occasions it is possible that a requests triggers an undefined error. These are reported automatically to the development team.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                }
             }
          },
          "delete":{
             "summary":"delete_role",
             "description":"Delete a role. All linked users and groups will lose their associated privileges granted by this role.",
             "tags":[
                "role"
             ],
             "operationId":"delete_role",
             "responses":{
                "204":{
                   "description":"The role was successfully deleted."
                },
                "400":{
                   "description":"If the request is badly formatted. For specific information see the message in the response.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                },
                "401":{
                   "description":"If the credentials used to make the call are invalid or expired.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                },
                "403":{
                   "description":"If the caller has insufficient privileges to perform the requested action.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                },
                "404":{
                   "description":"If the resource with the specified id does not exist.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                },
                "500":{
                   "description":"On rare occasions it is possible that a requests triggers an undefined error. These are reported automatically to the development team.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                }
             },
             "parameters":[
                {
                   "name":"authorization",
                   "in":"header",
                   "description":"Due to the limitations of the Open API 2 specification authorization headers are supplied on a per function basis. The acceptable formats for this header are `Bearer <session_id>` where `<session_id>` is replaced by the session id or `Digest <api_key_signature>` where `<api_key_signature>` is replaced by the API key signature.",
                   "required":true,
                   "type":"string"
                },
                {
                   "name":"roleId",
                   "in":"path",
                   "description":"The id of the role.",
                   "required":true,
                   "type":"string"
                }
             ]
          },
          "patch":{
             "summary":"modify_role",
             "description":"Modify a role. Only supplied properties that differ from the existing will be patched. Note that statements have separate functions. Including or omitting them from this function will have no effect.",
             "tags":[
                "role"
             ],
             "operationId":"modify_role",
             "produces":[
                "application/json"
             ],
             "consumes":[
                "application/json"
             ],
             "responses":{
                "201":{
                   "description":"The complete modified `role`.",
                   "schema":{
                      "$ref":"#/definitions/role"
                   }
                },
                "400":{
                   "description":"If the request is badly formatted. For specific information see the message in the response.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                },
                "401":{
                   "description":"If the credentials used to make the call are invalid or expired.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                },
                "403":{
                   "description":"If the caller has insufficient privileges to perform the requested action.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                },
                "500":{
                   "description":"On rare occasions it is possible that a requests triggers an undefined error. These are reported automatically to the development team.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                }
             },
             "parameters":[
                {
                   "name":"authorization",
                   "in":"header",
                   "description":"Due to the limitations of the Open API 2 specification authorization headers are supplied on a per function basis. The acceptable formats for this header are `Bearer <session_id>` where `<session_id>` is replaced by the session id or `Digest <api_key_signature>` where `<api_key_signature>` is replaced by the API key signature.",
                   "required":true,
                   "type":"string"
                },
                {
                   "name":"roleId",
                   "in":"path",
                   "description":"The id of the role.",
                   "required":true,
                   "type":"string"
                },
                {
                   "in":"body",
                   "name":"body",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/role"
                   }
                }
             ]
          }
       },
       "/roles/{roleId}/statements":{
          "post":{
             "summary":"create_role_statement",
             "description":"Creates and adds a statement to a role. Note that this function create the statement and binds it to the role in a single call.",
             "tags":[
                "role"
             ],
             "operationId":"create_role_statement",
             "produces":[
                "application/json"
             ],
             "consumes":[
                "application/json"
             ],
             "responses":{
                "201":{
                   "description":"A collection containing all the role statements including the latest addition.",
                   "schema":{
                      "type":"array",
                      "items":{
                         "$ref":"#/definitions/statement"
                      }
                   }
                },
                "400":{
                   "description":"If the request is badly formatted. For specific information see the message in the response.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                },
                "401":{
                   "description":"If the credentials used to make the call are invalid or expired.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                },
                "403":{
                   "description":"If the caller has insufficient privileges to perform the requested action.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                },
                "500":{
                   "description":"On rare occasions it is possible that a requests triggers an undefined error. These are reported automatically to the development team.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                }
             },
             "parameters":[
                {
                   "name":"authorization",
                   "in":"header",
                   "description":"Due to the limitations of the Open API 2 specification authorization headers are supplied on a per function basis. The acceptable formats for this header are `Bearer <session_id>` where `<session_id>` is replaced by the session id or `Digest <api_key_signature>` where `<api_key_signature>` is replaced by the API key signature.",
                   "required":true,
                   "type":"string"
                },
                {
                   "name":"roleId",
                   "in":"path",
                   "description":"The id of the role.",
                   "required":true,
                   "type":"string"
                },
                {
                   "in":"body",
                   "name":"body",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/statement"
                   }
                }
             ]
          }
       },
       "/roles/{roleId}/statements/{statementId}":{
          "put":{
             "summary":"modify_role_statement",
             "description":"Update a role statement with a new one. The operation is idempotent and the entire model is replaced.",
             "tags":[
                "role"
             ],
             "operationId":"modify_role_statement",
             "produces":[
                "application/json"
             ],
             "consumes":[
                "application/json"
             ],
             "responses":{
                "201":{
                   "description":"A complete collection of all the statements associated to the role after the function is executed.",
                   "schema":{
                      "type":"array",
                      "items":{
                         "$ref":"#/definitions/statement"
                      }
                   }
                },
                "400":{
                   "description":"If the request is badly formatted. For specific information see the message in the response.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                },
                "401":{
                   "description":"If the credentials used to make the call are invalid or expired.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                },
                "403":{
                   "description":"If the caller has insufficient privileges to perform the requested action.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                },
                "500":{
                   "description":"On rare occasions it is possible that a requests triggers an undefined error. These are reported automatically to the development team.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                }
             },
             "parameters":[
                {
                   "name":"authorization",
                   "in":"header",
                   "description":"Due to the limitations of the Open API 2 specification authorization headers are supplied on a per function basis. The acceptable formats for this header are `Bearer <session_id>` where `<session_id>` is replaced by the session id or `Digest <api_key_signature>` where `<api_key_signature>` is replaced by the API key signature.",
                   "required":true,
                   "type":"string"
                },
                {
                   "name":"roleId",
                   "in":"path",
                   "description":"The id of the role.",
                   "required":true,
                   "type":"string"
                },
                {
                   "name":"statementId",
                   "in":"path",
                   "description":"The id of the statement.",
                   "required":true,
                   "type":"string"
                },
                {
                   "in":"body",
                   "name":"body",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/statement"
                   }
                }
             ]
          },
          "delete":{
             "summary":"delete_role_statement",
             "description":"Removes and deletes a statement from a role in a single function.",
             "tags":[
                "role"
             ],
             "operationId":"delete_role_statement",
             "produces":[
                "application/json"
             ],
             "responses":{
                "201":{
                   "description":"A complete collection of all the statements associated to the role after the function is executed.",
                   "schema":{
                      "type":"array",
                      "items":{
                         "$ref":"#/definitions/statement"
                      }
                   }
                },
                "400":{
                   "description":"If the request is badly formatted. For specific information see the message in the response.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                },
                "401":{
                   "description":"If the credentials used to make the call are invalid or expired.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                },
                "403":{
                   "description":"If the caller has insufficient privileges to perform the requested action.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                },
                "404":{
                   "description":"If any of the resources do not exist.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                },
                "500":{
                   "description":"On rare occasions it is possible that a requests triggers an undefined error. These are reported automatically to the development team.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                }
             },
             "parameters":[
                {
                   "name":"authorization",
                   "in":"header",
                   "description":"Due to the limitations of the Open API 2 specification authorization headers are supplied on a per function basis. The acceptable formats for this header are `Bearer <session_id>` where `<session_id>` is replaced by the session id or `Digest <api_key_signature>` where `<api_key_signature>` is replaced by the API key signature.",
                   "required":true,
                   "type":"string"
                },
                {
                   "name":"roleId",
                   "in":"path",
                   "description":"The id of the role.",
                   "required":true,
                   "type":"string"
                },
                {
                   "name":"statementId",
                   "in":"path",
                   "description":"The id of the statement.",
                   "required":true,
                   "type":"string"
                }
             ]
          }
       },
       "/logs/groups":{
          "get":{
             "summary":"get_log_groups",
             "description":"Retrieve a collection of log groups.",
             "tags":[
                "log"
             ],
             "operationId":"get_log_groups",
             "produces":[
                "application/json"
             ],
             "parameters":[
                {
                   "name":"authorization",
                   "in":"header",
                   "description":"Due to the limitations of the Open API 2 specification authorization headers are supplied on a per function basis. The acceptable formats for this header are `Bearer <session_id>` where `<session_id>` is replaced by the session id or `Digest <api_key_signature>` where `<api_key_signature>` is replaced by the API key signature.",
                   "required":true,
                   "type":"string"
                },
                {
                   "name":"sort",
                   "in":"query",
                   "description":"The field name that should be used to sort the resulting collection. This value must exist as a property of the response object otherwise a default sort will be applied.",
                   "type":"string"
                },
                {
                   "name":"page",
                   "in":"query",
                   "description":"The page number to request. If the value is larger than the maximum pages available the last page will be returned. If a value less than 1 is specified the first page will be returned. Collection information is available in the headers.",
                   "type":"integer",
                   "format":"int32"
                },
                {
                   "name":"perPage",
                   "in":"query",
                   "description":"The number of records to include in a single page. If a value of less than 1 is specified a best effort to return the whole collection will be made. This is not guaranteed and the response headers should be checked to obtain any additional pages.",
                   "type":"integer",
                   "format":"int32"
                },
                {
                   "name":"fields",
                   "in":"query",
                   "description":"A comma separated list of property fields that should be included in the response model. These values must exist as a properties of the response object. The id field will always be returned regardless.",
                   "type":"string"
                },
                {
                   "name":"filter",
                   "in":"query",
                   "description":"A URL encoded query filter. For more information on filter formats see the documentation.",
                   "type":"string"
                }
             ],
             "responses":{
                "200":{
                   "description":"A collection (or subset) of log groups based on the callers privileges and the query parameters.",
                   "schema":{
                      "type":"array",
                      "items":{
                         "$ref":"#/definitions/log_group"
                      }
                   }
                },
                "400":{
                   "description":"If the request is badly formatted. For specific information see the message in the response.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                },
                "401":{
                   "description":"If the credentials used to make the call are invalid or expired.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                },
                "403":{
                   "description":"If the caller has insufficient privileges to perform the requested action.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                },
                "500":{
                   "description":"On rare occasions it is possible that a requests triggers an undefined error. These are reported automatically to the development team.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                }
             }
          }
       },
       "/logs/groups/{groupId}":{
          "get":{
             "summary":"get_log_group",
             "description":"Retrieve a specific log group by its id.",
             "tags":[
                "log"
             ],
             "operationId":"get_log_group",
             "produces":[
                "application/json"
             ],
             "parameters":[
                {
                   "name":"authorization",
                   "in":"header",
                   "description":"Due to the limitations of the Open API 2 specification authorization headers are supplied on a per function basis. The acceptable formats for this header are `Bearer <session_id>` where `<session_id>` is replaced by the session id or `Digest <api_key_signature>` where `<api_key_signature>` is replaced by the API key signature.",
                   "required":true,
                   "type":"string"
                },
                {
                   "name":"fields",
                   "in":"query",
                   "description":"A comma separated list of property fields that should be included in the response model. These values must exist as a properties of the response object. The id field will always be returned regardless.",
                   "type":"string"
                },
                {
                   "name":"groupId",
                   "in":"path",
                   "description":"The id of the log group.",
                   "required":true,
                   "type":"string"
                }
             ],
             "responses":{
                "200":{
                   "description":"The requested log group.",
                   "schema":{
                      "$ref":"#/definitions/log_group"
                   }
                },
                "400":{
                   "description":"If the request is badly formatted. For specific information see the message in the response.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                },
                "401":{
                   "description":"If the credentials used to make the call are invalid or expired.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                },
                "403":{
                   "description":"If the caller has insufficient privileges to perform the requested action.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                },
                "404":{
                   "description":"If the resource with the specified id does not exist.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                },
                "500":{
                   "description":"On rare occasions it is possible that a requests triggers an undefined error. These are reported automatically to the development team.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                }
             }
          },
          "delete":{
             "summary":"delete_log_group",
             "description":"Delete a log group. All associated streams and events will be deleted in a cascade.",
             "tags":[
                "log"
             ],
             "operationId":"delete_log_group",
             "responses":{
                "204":{
                   "description":"The log group was successfully deleted."
                },
                "400":{
                   "description":"If the request is badly formatted. For specific information see the message in the response.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                },
                "401":{
                   "description":"If the credentials used to make the call are invalid or expired.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                },
                "403":{
                   "description":"If the caller has insufficient privileges to perform the requested action.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                },
                "404":{
                   "description":"If the resource with the specified id does not exist.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                },
                "500":{
                   "description":"On rare occasions it is possible that a requests triggers an undefined error. These are reported automatically to the development team.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                }
             },
             "parameters":[
                {
                   "name":"authorization",
                   "in":"header",
                   "description":"Due to the limitations of the Open API 2 specification authorization headers are supplied on a per function basis. The acceptable formats for this header are `Bearer <session_id>` where `<session_id>` is replaced by the session id or `Digest <api_key_signature>` where `<api_key_signature>` is replaced by the API key signature.",
                   "required":true,
                   "type":"string"
                },
                {
                   "name":"groupId",
                   "in":"path",
                   "description":"The id of the log group.",
                   "required":true,
                   "type":"string"
                }
             ]
          }
       },
       "/logs/groups/{groupId}/streams":{
          "get":{
             "summary":"get_log_streams",
             "description":"Retrieve a collection of log streams.",
             "tags":[
                "log"
             ],
             "operationId":"get_log_streams",
             "produces":[
                "application/json"
             ],
             "parameters":[
                {
                   "name":"authorization",
                   "in":"header",
                   "description":"Due to the limitations of the Open API 2 specification authorization headers are supplied on a per function basis. The acceptable formats for this header are `Bearer <session_id>` where `<session_id>` is replaced by the session id or `Digest <api_key_signature>` where `<api_key_signature>` is replaced by the API key signature.",
                   "required":true,
                   "type":"string"
                },
                {
                   "name":"sort",
                   "in":"query",
                   "description":"The field name that should be used to sort the resulting collection. This value must exist as a property of the response object otherwise a default sort will be applied.",
                   "type":"string"
                },
                {
                   "name":"page",
                   "in":"query",
                   "description":"The page number to request. If the value is larger than the maximum pages available the last page will be returned. If a value less than 1 is specified the first page will be returned. Collection information is available in the headers.",
                   "type":"integer",
                   "format":"int32"
                },
                {
                   "name":"perPage",
                   "in":"query",
                   "description":"The number of records to include in a single page. If a value of less than 1 is specified a best effort to return the whole collection will be made. This is not guaranteed and the response headers should be checked to obtain any additional pages.",
                   "type":"integer",
                   "format":"int32"
                },
                {
                   "name":"fields",
                   "in":"query",
                   "description":"A comma separated list of property fields that should be included in the response model. These values must exist as a properties of the response object. The id field will always be returned regardless.",
                   "type":"string"
                },
                {
                   "name":"filter",
                   "in":"query",
                   "description":"A URL encoded query filter. For more information on filter formats see the documentation.",
                   "type":"string"
                },
                {
                   "name":"groupId",
                   "in":"path",
                   "description":"The id of the log group.",
                   "required":true,
                   "type":"string"
                }
             ],
             "responses":{
                "200":{
                   "description":"A collection (or subset) of log streams based on the callers privileges and the query parameters.",
                   "schema":{
                      "type":"array",
                      "items":{
                         "$ref":"#/definitions/log_stream"
                      }
                   }
                },
                "400":{
                   "description":"If the request is badly formatted. For specific information see the message in the response.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                },
                "401":{
                   "description":"If the credentials used to make the call are invalid or expired.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                },
                "403":{
                   "description":"If the caller has insufficient privileges to perform the requested action.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                },
                "500":{
                   "description":"On rare occasions it is possible that a requests triggers an undefined error. These are reported automatically to the development team.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                }
             }
          }
       },
       "/logs/groups/{groupId}/streams/{streamId}":{
          "get":{
             "summary":"get_log_stream",
             "description":"Retrieve a specific log stream by its id.",
             "tags":[
                "log"
             ],
             "operationId":"get_log_stream",
             "produces":[
                "application/json"
             ],
             "parameters":[
                {
                   "name":"authorization",
                   "in":"header",
                   "description":"Due to the limitations of the Open API 2 specification authorization headers are supplied on a per function basis. The acceptable formats for this header are `Bearer <session_id>` where `<session_id>` is replaced by the session id or `Digest <api_key_signature>` where `<api_key_signature>` is replaced by the API key signature.",
                   "required":true,
                   "type":"string"
                },
                {
                   "name":"fields",
                   "in":"query",
                   "description":"A comma separated list of property fields that should be included in the response model. These values must exist as a properties of the response object. The id field will always be returned regardless.",
                   "type":"string"
                },
                {
                   "name":"groupId",
                   "in":"path",
                   "description":"The id of the log group.",
                   "required":true,
                   "type":"string"
                },
                {
                   "name":"streamId",
                   "in":"path",
                   "description":"The id of the log stream.",
                   "required":true,
                   "type":"string"
                }
             ],
             "responses":{
                "200":{
                   "description":"The requested log stream.",
                   "schema":{
                      "$ref":"#/definitions/log_stream"
                   }
                },
                "400":{
                   "description":"If the request is badly formatted. For specific information see the message in the response.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                },
                "401":{
                   "description":"If the credentials used to make the call are invalid or expired.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                },
                "403":{
                   "description":"If the caller has insufficient privileges to perform the requested action.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                },
                "404":{
                   "description":"If the resource with the specified id does not exist.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                },
                "500":{
                   "description":"On rare occasions it is possible that a requests triggers an undefined error. These are reported automatically to the development team.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                }
             }
          }
       },
       "/logs/groups/{groupId}/streams/{streamId}/events":{
          "get":{
             "summary":"get_log_events",
             "description":"Retrieve a collection of log events.",
             "tags":[
                "log"
             ],
             "operationId":"get_log_events",
             "produces":[
                "application/json"
             ],
             "parameters":[
                {
                   "name":"authorization",
                   "in":"header",
                   "description":"Due to the limitations of the Open API 2 specification authorization headers are supplied on a per function basis. The acceptable formats for this header are `Bearer <session_id>` where `<session_id>` is replaced by the session id or `Digest <api_key_signature>` where `<api_key_signature>` is replaced by the API key signature.",
                   "required":true,
                   "type":"string"
                },
                {
                   "name":"sort",
                   "in":"query",
                   "description":"The field name that should be used to sort the resulting collection. This value must exist as a property of the response object otherwise a default sort will be applied.",
                   "type":"string"
                },
                {
                   "name":"page",
                   "in":"query",
                   "description":"The page number to request. If the value is larger than the maximum pages available the last page will be returned. If a value less than 1 is specified the first page will be returned. Collection information is available in the headers.",
                   "type":"integer",
                   "format":"int32"
                },
                {
                   "name":"perPage",
                   "in":"query",
                   "description":"The number of records to include in a single page. If a value of less than 1 is specified a best effort to return the whole collection will be made. This is not guaranteed and the response headers should be checked to obtain any additional pages.",
                   "type":"integer",
                   "format":"int32"
                },
                {
                   "name":"fields",
                   "in":"query",
                   "description":"A comma separated list of property fields that should be included in the response model. These values must exist as a properties of the response object. The id field will always be returned regardless.",
                   "type":"string"
                },
                {
                   "name":"filter",
                   "in":"query",
                   "description":"A URL encoded query filter. For more information on filter formats see the documentation.",
                   "type":"string"
                },
                {
                   "name":"groupId",
                   "in":"path",
                   "description":"The id of the log group.",
                   "required":true,
                   "type":"string"
                },
                {
                   "name":"streamId",
                   "in":"path",
                   "description":"The id of the log stream.",
                   "required":true,
                   "type":"string"
                }
             ],
             "responses":{
                "200":{
                   "description":"A collection (or subset) of log events based on the callers privileges and the query parameters.",
                   "schema":{
                      "type":"array",
                      "items":{
                         "$ref":"#/definitions/log_event"
                      }
                   }
                },
                "400":{
                   "description":"If the request is badly formatted. For specific information see the message in the response.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                },
                "401":{
                   "description":"If the credentials used to make the call are invalid or expired.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                },
                "403":{
                   "description":"If the caller has insufficient privileges to perform the requested action.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                },
                "500":{
                   "description":"On rare occasions it is possible that a requests triggers an undefined error. These are reported automatically to the development team.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                }
             }
          }
       },
       "/logs/groups/{groupId}/streams/{streamId}/events/{eventId}":{
          "get":{
             "summary":"get_log_event",
             "description":"Retrieve a specific log event by its id.",
             "tags":[
                "log"
             ],
             "operationId":"get_log_event",
             "produces":[
                "application/json"
             ],
             "parameters":[
                {
                   "name":"authorization",
                   "in":"header",
                   "description":"Due to the limitations of the Open API 2 specification authorization headers are supplied on a per function basis. The acceptable formats for this header are `Bearer <session_id>` where `<session_id>` is replaced by the session id or `Digest <api_key_signature>` where `<api_key_signature>` is replaced by the API key signature.",
                   "required":true,
                   "type":"string"
                },
                {
                   "name":"fields",
                   "in":"query",
                   "description":"A comma separated list of property fields that should be included in the response model. These values must exist as a properties of the response object. The id field will always be returned regardless.",
                   "type":"string"
                },
                {
                   "name":"groupId",
                   "in":"path",
                   "description":"The id of the log group.",
                   "required":true,
                   "type":"string"
                },
                {
                   "name":"streamId",
                   "in":"path",
                   "description":"The id of the log stream.",
                   "required":true,
                   "type":"string"
                },
                {
                   "name":"eventId",
                   "in":"path",
                   "description":"The id of the log event.",
                   "required":true,
                   "type":"string"
                }
             ],
             "responses":{
                "200":{
                   "description":"The requested log event.",
                   "schema":{
                      "$ref":"#/definitions/log_event"
                   }
                },
                "400":{
                   "description":"If the request is badly formatted. For specific information see the message in the response.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                },
                "401":{
                   "description":"If the credentials used to make the call are invalid or expired.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                },
                "403":{
                   "description":"If the caller has insufficient privileges to perform the requested action.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                },
                "404":{
                   "description":"If the resource with the specified id does not exist.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                },
                "500":{
                   "description":"On rare occasions it is possible that a requests triggers an undefined error. These are reported automatically to the development team.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                }
             }
          }
       },
       "/apikeys":{
          "get":{
             "summary":"get_api_keys",
             "description":"Retrieve a collection of api keys for the caller.",
             "tags":[
                "api_key"
             ],
             "operationId":"get_api_keys",
             "produces":[
                "application/json"
             ],
             "parameters":[
                {
                   "name":"authorization",
                   "in":"header",
                   "description":"Due to the limitations of the Open API 2 specification authorization headers are supplied on a per function basis. The acceptable formats for this header are `Bearer <session_id>` where `<session_id>` is replaced by the session id or `Digest <api_key_signature>` where `<api_key_signature>` is replaced by the API key signature.",
                   "required":true,
                   "type":"string"
                },
                {
                   "name":"sort",
                   "in":"query",
                   "description":"The field name that should be used to sort the resulting collection. This value must exist as a property of the response object otherwise a default sort will be applied.",
                   "type":"string"
                },
                {
                   "name":"page",
                   "in":"query",
                   "description":"The page number to request. If the value is larger than the maximum pages available the last page will be returned. If a value less than 1 is specified the first page will be returned. Collection information is available in the headers.",
                   "type":"integer",
                   "format":"int32"
                },
                {
                   "name":"perPage",
                   "in":"query",
                   "description":"The number of records to include in a single page. If a value of less than 1 is specified a best effort to return the whole collection will be made. This is not guaranteed and the response headers should be checked to obtain any additional pages.",
                   "type":"integer",
                   "format":"int32"
                },
                {
                   "name":"fields",
                   "in":"query",
                   "description":"A comma separated list of property fields that should be included in the response model. These values must exist as a properties of the response object. The id field will always be returned regardless.",
                   "type":"string"
                },
                {
                   "name":"filter",
                   "in":"query",
                   "description":"A URL encoded query filter. For more information on filter formats see the documentation.",
                   "type":"string"
                }
             ],
             "responses":{
                "200":{
                   "description":"A collection (or subset) of api keys belonging to the callers and based on the query parameters.",
                   "schema":{
                      "type":"array",
                      "items":{
                         "$ref":"#/definitions/api_key"
                      }
                   }
                },
                "400":{
                   "description":"If the request is badly formatted. For specific information see the message in the response.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                },
                "401":{
                   "description":"If the credentials used to make the call are invalid or expired.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                },
                "403":{
                   "description":"If the caller has insufficient privileges to perform the requested action.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                },
                "500":{
                   "description":"On rare occasions it is possible that a requests triggers an undefined error. These are reported automatically to the development team.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                }
             }
          },
          "post":{
             "summary":"create_api_key",
             "description":"Create a new API key for the caller.",
             "tags":[
                "api_key"
             ],
             "operationId":"create_api_key",
             "produces":[
                "application/json"
             ],
             "responses":{
                "201":{
                   "description":"The created `api_key` containing both the id (public key) and the privateKey. Note this is the only time the private key is returned.",
                   "schema":{
                      "$ref":"#/definitions/api_key"
                   }
                },
                "400":{
                   "description":"If the request is badly formatted. For specific information see the message in the response.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                },
                "401":{
                   "description":"If the credentials used to make the call are invalid or expired.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                },
                "403":{
                   "description":"If the caller has insufficient privileges to perform the requested action.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                },
                "500":{
                   "description":"On rare occasions it is possible that a requests triggers an undefined error. These are reported automatically to the development team.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                }
             },
             "parameters":[
                {
                   "name":"authorization",
                   "in":"header",
                   "description":"Due to the limitations of the Open API 2 specification authorization headers are supplied on a per function basis. The acceptable formats for this header are `Bearer <session_id>` where `<session_id>` is replaced by the session id or `Digest <api_key_signature>` where `<api_key_signature>` is replaced by the API key signature.",
                   "required":true,
                   "type":"string"
                }
             ]
          }
       },
       "/apikeys/{apikeyId}":{
          "get":{
             "summary":"get_api_key",
             "description":"Retrieve a specific api key by its id.",
             "tags":[
                "api_key"
             ],
             "operationId":"get_api_key",
             "produces":[
                "application/json"
             ],
             "parameters":[
                {
                   "name":"authorization",
                   "in":"header",
                   "description":"Due to the limitations of the Open API 2 specification authorization headers are supplied on a per function basis. The acceptable formats for this header are `Bearer <session_id>` where `<session_id>` is replaced by the session id or `Digest <api_key_signature>` where `<api_key_signature>` is replaced by the API key signature.",
                   "required":true,
                   "type":"string"
                },
                {
                   "name":"fields",
                   "in":"query",
                   "description":"A comma separated list of property fields that should be included in the response model. These values must exist as a properties of the response object. The id field will always be returned regardless.",
                   "type":"string"
                },
                {
                   "name":"apikeyId",
                   "in":"path",
                   "required":true,
                   "type":"string"
                }
             ],
             "responses":{
                "200":{
                   "description":"The requested api key.",
                   "schema":{
                      "$ref":"#/definitions/api_key"
                   }
                },
                "400":{
                   "description":"If the request is badly formatted. For specific information see the message in the response.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                },
                "401":{
                   "description":"If the credentials used to make the call are invalid or expired.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                },
                "403":{
                   "description":"If the caller has insufficient privileges to perform the requested action.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                },
                "404":{
                   "description":"If the resource with the specified id does not exist.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                },
                "500":{
                   "description":"On rare occasions it is possible that a requests triggers an undefined error. These are reported automatically to the development team.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                }
             }
          },
          "delete":{
             "summary":"delete_api_key",
             "description":"Delete an API key. The key must belong to the caller.",
             "tags":[
                "api_key"
             ],
             "operationId":"delete_api_key",
             "responses":{
                "204":{
                   "description":"The API key was successfully deleted."
                },
                "400":{
                   "description":"If the request is badly formatted. For specific information see the message in the response.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                },
                "401":{
                   "description":"If the credentials used to make the call are invalid or expired.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                },
                "403":{
                   "description":"If the caller has insufficient privileges to perform the requested action.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                },
                "404":{
                   "description":"If the resource with the specified id does not exist.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                },
                "500":{
                   "description":"On rare occasions it is possible that a requests triggers an undefined error. These are reported automatically to the development team.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                }
             },
             "parameters":[
                {
                   "name":"authorization",
                   "in":"header",
                   "description":"Due to the limitations of the Open API 2 specification authorization headers are supplied on a per function basis. The acceptable formats for this header are `Bearer <session_id>` where `<session_id>` is replaced by the session id or `Digest <api_key_signature>` where `<api_key_signature>` is replaced by the API key signature.",
                   "required":true,
                   "type":"string"
                },
                {
                   "name":"apikeyId",
                   "in":"path",
                   "required":true,
                   "type":"string"
                }
             ]
          },
          "patch":{
             "summary":"modify_api_key",
             "description":"Modify an api key. Only supplied properties that differ from the existing will be patched. Currently the only supported mutable parameter is the `state`.",
             "tags":[
                "api_key"
             ],
             "operationId":"modify_api_key",
             "produces":[
                "application/json"
             ],
             "consumes":[
                "application/json"
             ],
             "responses":{
                "201":{
                   "description":"The complete modified `api key`. Note the private key is not included.",
                   "schema":{
                      "$ref":"#/definitions/api_key"
                   }
                },
                "400":{
                   "description":"If the request is badly formatted. For specific information see the message in the response.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                },
                "401":{
                   "description":"If the credentials used to make the call are invalid or expired.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                },
                "403":{
                   "description":"If the caller has insufficient privileges to perform the requested action.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                },
                "500":{
                   "description":"On rare occasions it is possible that a requests triggers an undefined error. These are reported automatically to the development team.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                }
             },
             "parameters":[
                {
                   "name":"authorization",
                   "in":"header",
                   "description":"Due to the limitations of the Open API 2 specification authorization headers are supplied on a per function basis. The acceptable formats for this header are `Bearer <session_id>` where `<session_id>` is replaced by the session id or `Digest <api_key_signature>` where `<api_key_signature>` is replaced by the API key signature.",
                   "required":true,
                   "type":"string"
                },
                {
                   "name":"apikeyId",
                   "in":"path",
                   "required":true,
                   "type":"string"
                },
                {
                   "in":"body",
                   "name":"body",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/api_key"
                   }
                }
             ]
          }
       },
       "/privileges":{
          "get":{
             "summary":"get_user_privileges",
             "description":"Retrieve a collection of access privileges for the caller.",
             "tags":[
                "user"
             ],
             "operationId":"get_user_privileges",
             "produces":[
                "application/json"
             ],
             "parameters":[
                {
                   "name":"authorization",
                   "in":"header",
                   "description":"Due to the limitations of the Open API 2 specification authorization headers are supplied on a per function basis. The acceptable formats for this header are `Bearer <session_id>` where `<session_id>` is replaced by the session id or `Digest <api_key_signature>` where `<api_key_signature>` is replaced by the API key signature.",
                   "required":true,
                   "type":"string"
                },
                {
                   "name":"level",
                   "in":"query",
                   "description":"By default the response collection will contain service specific privileges. If the level flag is set to `application` a condensed application only collection will be returned.",
                   "type":"string"
                }
             ],
             "responses":{
                "200":{
                   "description":"A map containing the callers context action priviledges.",
                   "schema":{
                      "$ref":"#/definitions/object"
                   }
                },
                "400":{
                   "description":"If the request is badly formatted. For specific information see the message in the response.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                },
                "401":{
                   "description":"If the credentials used to make the call are invalid or expired.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                },
                "403":{
                   "description":"If the caller has insufficient privileges to perform the requested action.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                },
                "404":{
                   "description":"If the resource with the specified id does not exist.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                },
                "500":{
                   "description":"On rare occasions it is possible that a requests triggers an undefined error. These are reported automatically to the development team.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                }
             }
          }
       },
       "/sessions":{
          "post":{
             "summary":"create_session",
             "description":"Create a session between the client and the server.",
             "tags":[
                "security"
             ],
             "operationId":"create_session",
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"The new session.",
                   "schema":{
                      "$ref":"#/definitions/session"
                   }
                },
                "401":{
                   "description":"If the credentials used to make the call are invalid.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                },
                "500":{
                   "description":"On rare occasions it is possible that a requests triggers an undefined error. These are reported automatically to the development team.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                }
             },
             "parameters":[
 
             ],
             "security":[
                {
                   "basic_auth":[
 
                   ]
                }
             ]
          }
       },
       "/batches":{
          "post":{
             "summary":"execute_batch_requests",
             "description":"Executes a custom collection of requests in a single call.",
             "tags":[
                "account",
                "api_key",
                "group",
                "log",
                "role",
                "user"
             ],
             "operationId":"execute_batch_request",
             "produces":[
                "application/json"
             ],
             "consumes":[
                "application/json"
             ],
             "parameters":[
                {
                   "name":"authorization",
                   "in":"header",
                   "description":"Due to the limitations of the Open API 2 specification authorization headers are supplied on a per function basis. The acceptable formats for this header are `Bearer <session_id>` where `<session_id>` is replaced by the session id or `Digest <api_key_signature>` where `<api_key_signature>` is replaced by the API key signature.",
                   "required":true,
                   "type":"string"
                },
                {
                   "name":"parallel",
                   "in":"query",
                   "description":"By default all batch operations will be processed in parallel. This means that there is no guarantee of the execution order. If the order is critical this flag can be set to false and a best effort will be made to execute the requests in the order they appear in the collection.",
                   "type":"boolean"
                },
                {
                   "in":"body",
                   "name":"body",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/batch_request"
                   }
                }
             ],
             "responses":{
                "200":{
                   "description":"The response of all the individual requests processed as part of the batch.",
                   "schema":{
                      "type":"array",
                      "items":{
                         "$ref":"#/definitions/batch_response"
                      }
                   }
                },
                "400":{
                   "description":"If the request is badly formatted. For specific information see the message in the response.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                },
                "401":{
                   "description":"If the credentials used to make the call are invalid or expired.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                },
                "403":{
                   "description":"If the caller has insufficient privileges to perform the requested action.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                },
                "500":{
                   "description":"On rare occasions it is possible that a requests triggers an undefined error. These are reported automatically to the development team.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                }
             }
          }
       },
       "/validations":{
          "put":{
             "summary":"validate",
             "description":"Validate a new user account.",
             "tags":[
                "security"
             ],
             "operationId":"validate",
             "consumes":[
                "application/json"
             ],
             "responses":{
                "204":{
                   "description":"The validation was successful."
                },
                "401":{
                   "description":"If the credentials used to make the call are invalid or expired.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                },
                "500":{
                   "description":"On rare occasions it is possible that a requests triggers an undefined error. These are reported automatically to the development team.",
                   "schema":{
                      "$ref":"#/definitions/error"
                   }
                }
             },
             "parameters":[
                {
                   "name":"authorization",
                   "in":"header",
                   "description":"Due to the limitations of the Open API 2 specification authorization headers are supplied on a per function basis. The acceptable formats for this header are `Bearer <validation_token_id>` where `<validation_token_id>` is replaced by the token id received in the validation email.",
                   "required":true,
                   "type":"string"
                },
                {
                   "in":"body",
                   "name":"body",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/validation"
                   }
                }
             ]
          }
       }
    },
    "definitions":{
       "data":{
        "type": "object"
       },
       "object":{
 
       },
       "account":{
           "type": "object",
          "properties":{
             "id":{
                "description":"A unique identifier. This is generated by the system at creation and cannot be specified.",
                "type":"string"
             },
             "name":{
                "description":"A simple name to help identify the account within its operational context.",
                "type":"string"
             },
             "description":{
                "description":"A short descriptive field to help identify the account within its operational context. ",
                "type":"string"
             },
             "data":{
                "$ref":"#/definitions/data",
                "description":"A multimap defining a custom collection of KSVP (Key Set Value Pair)"
             }
          }
       },
       "user":{
        "type": "object",
          "properties":{
             "id":{
                "description":"A unique identifier. This is generated by the system at creation and cannot be specified.",
                "type":"string"
             },
             "email":{
                "description":"A unique email assigned to to a user for security and identification.",
                "type":"string"
             },
             "username":{
                "description":"A unique username assigned to to a user for identification.",
                "type":"string"
             },
             "name":{
                "description":"The first and last name of the user.",
                "type":"string"
             },
             "state":{
                "description":"The operational state of an account. This value can be 'ACTIVE', 'SUSPENDED' or 'UNCONFIRMED'.",
                "type":"string"
             },
             "data":{
                "$ref":"#/definitions/data",
                "description":"A multimap defining a custom collection of KSVP (Key Set Value Pair)"
             },
             "roleIds":{
                "description":"A collection of the role ids associated with the user.",
                "type":"array",
                "items":{
                   "type":"string"
                }
             },
             "groupIds":{
                "description":"A collection of the group ids associated with the user.",
                "type":"array",
                "items":{
                   "type":"string"
                }
             },
             "bio":{
                "description":"A short biography or description of the user.",
                "type":"string"
             }
          }
       },
       "group":{
        "type": "object",
          "properties":{
             "id":{
                "description":"A unique identifier. This is generated by the system at creation and cannot be specified.",
                "type":"string"
             },
             "name":{
                "description":"A simple name to help identify the group within its operational context.",
                "type":"string"
             },
             "description":{
                "description":"A short descriptive field to help identify the group within its operational context. ",
                "type":"string"
             },
             "data":{
                "$ref":"#/definitions/data",
                "description":"A multimap defining a custom collection of KSVP (Key Set Value Pair)"
             }
          }
       },
       "rule":{
        "type": "object",
          "properties":{
             "id":{
                "description":"An optional field identifier.",
                "type":"string"
             },
             "field":{
                "description":"The optional GUI field. Even though this property is optional it is recommended or the GUI may fail to recognise the field.",
                "type":"string"
             },
             "type":{
                "description":"The optional field type. If specified a best effort will be made to perform a type cast at evaluation time of the value. If no type is specified or the cast fails the value will be evaluated as a string.",
                "type":"string"
             },
             "input":{
                "description":"The required field input name. During a rule evaluation the pattern is [input] [operator] [value]. e.g. [id] [equal] [123]",
                "type":"string"
             },
             "operator":{
                "description":"The required operator to define the evaluation comparison that must be achieved during evaluation. These values can be: `equal`, `not equal`, `in`, `not in`, `start`, `not start`, `end`, `not end`, `less`, `less or equal`, `greater` or `greater or equal`.",
                "type":"string"
             },
             "value":{
                "description":"The required field input value. All value types are serialised to a string for transport. The `type` property is used to type cast the value at evaluation time. During a rule evaluation the pattern is [input] [operator] [value]. e.g. [id] [equal] [123]",
                "type":"string"
             },
             "expression":{
                "$ref":"#/definitions/expression",
                "description":"An optional sub-expression to evaluate as part of this rule."
             }
          }
       },
       "expression":{
        "type": "object",
          "properties":{
             "condition":{
                "description":"The logical condition that should be applied to the rule evaluation. This can be `AND` or `OR`.",
                "type":"string"
             },
             "rules":{
                "description":"A collection of rules that are to be evaluated as part of this expression.",
                "type":"array",
                "items":{
                   "$ref":"#/definitions/rule"
                }
             }
          }
       },
       "statement":{
        "type": "object",
          "properties":{
             "id":{
                "description":"A unique identifier. This is generated by the system at creation and cannot be specified.",
                "type":"string"
             },
             "effect":{
                "description":"The resulting effect that should be applied as a result of the statement. Allowed values are `ALLOW` or `DENY`.  This allows both implicit and explicit denial of services.",
                "type":"string"
             },
             "actions":{
                "description":"A collection of service context actions that must be matched for the statement to take effect. The action keys are used to manager application action privileges. The actions are designed to format the action request designating the target application, service and action in the following format: [application]:[service]:[action]. The application and service are always in lower case while the action is in Camel Case. e.g. access:group:AddAccount. For more information see the documentation.",
                "type":"array",
                "items":{
                   "type":"string"
                }
             },
             "expression":{
                "$ref":"#/definitions/expression",
                "description":"An optional expression. If this value is supplied access to an application or service will be considered conditional. The role will perform evaluations on an individual model basis to determine whether they pass or fail the expression."
             }
          }
       },
       "role":{
        "type": "object",
          "properties":{
             "id":{
                "description":"A unique identifier. This is generated by the system at creation and cannot be specified.",
                "type":"string"
             },
             "name":{
                "description":"A simple name to help identify the role within its operational context.",
                "type":"string"
             },
             "description":{
                "description":"A short descriptive field to help identify the role within its operational context. ",
                "type":"string"
             },
             "statements":{
                "$ref":"#/definitions/statement",
                "description":"A collection of statements defining the logic and privileges associated with this role."
             }
          }
       },
       "log_group":{
        "type": "object",
          "properties":{
             "id":{
                "description":"A unique identifier. This is generated by the system at creation and cannot be specified.",
                "type":"string"
             },
             "name":{
                "description":"A simple user defined name to help sub categories the logs within its operational context.",
                "type":"string"
             },
             "retention":{
                "format":"int32",
                "description":"The number of hours that logs should be retained before expiring.",
                "type":"integer"
             }
          }
       },
       "log_stream":{
        "type": "object",
          "properties":{
             "id":{
                "description":"A unique identifier. This is generated by the system at creation and cannot be specified.",
                "type":"string"
             },
             "name":{
                "description":"Stream names are system generated to help categories logs with a service and temporal marker. Stream names are in the format: yyyy/mm/dd-[event-type]-[workflow-id] e.g. 2018/01/01-[access:user:Create]-[12345678-abcdefgh]",
                "type":"string"
             }
          }
       },
       "log_event":{
        "type": "object",
          "properties":{
             "id":{
                "description":"A unique identifier. This is generated by the system at creation and cannot be specified.",
                "type":"string"
             },
             "message":{
                "description":"The log message containing the information about the event. The format will depend on the workflow settings.",
                "type":"string"
             },
             "date":{
                "format":"date-time",
                "description":"The event timestamp.",
                "type":"string"
             }
          }
       },
       "api_key":{
        "type": "object",
          "properties":{
             "id":{
                "description":"A unique identifier. This is generated by the system at creation and cannot be specified. This also acts as the public half of the asymmetric key.",
                "type":"string"
             },
             "privateKey":{
                "description":"The private key used in combination with the id (public key) to perform asymmetric digest signatures.",
                "type":"string"
             },
             "state":{
                "description":"The operational state of the key pair. This can be `ACTIVE` or `INACTIVE`.",
                "type":"string"
             }
          }
       },
       "validation":{
        "type": "object",
          "properties":{
             "secret":{
                "description":"The secret / password to assign to the user.",
                "type":"string"
             }
          }
       },
       "session":{
        "type": "object",
          "properties":{
             "expires":{
                "format":"int64",
                "description":"The unix timestamp (in seconds) when the session token will expire.",
                "type":"integer"
             },
             "id":{
                "description":"A unique identifier. This is generated by the system at creation and cannot be specified. This is the value that should be used with the `session_auth` as the bearer token value.",
                "type":"string"
             }
          }
       },
       "new_account":{
        "type": "object",
          "properties":{
             "account":{
                "$ref":"#/definitions/account",
                "description":"The new account that will be created and the specified user will be added to."
             },
             "user":{
                "$ref":"#/definitions/user",
                "description":"The new root user that will be associated with the account."
             }
          }
       },
       "batch_request":{
        "type": "object",
          "properties":{
             "id":{
                "description":"An optional but recommended id value to be able to match the response in the response collection to the original request. If one is not provided a random one will be generated and appended to the response.",
                "type":"string"
             },
             "method":{
                "description":"The HTTP method associated with the request. Values can be `GET`, `PATCH`, `PUT`, `POST`, `DELETE`, `CONNECT`, `HEAD`, `TRACE` or `OPTIONS`",
                "type":"string"
             },
             "path":{
                "description":"The full path of the request starting with forward slash (/). e.g. /users",
                "type":"string"
             },
             "queryParameters":{
                "$ref":"#/definitions/object",
                "description":"An optional map of query parameter values to pass as part of the request."
             },
             "body":{
                "$ref":"#/definitions/object",
                "description":"Any object that the request body is expecting."
             }
          }
       },
       "batch_response":{
        "type": "object",
          "properties":{
             "request":{
                "$ref":"#/definitions/batch_request",
                "description":"The original batch request object that was executed."
             },
             "statusCode":{
                "description":"The HTTP status code of the response from the original request.",
                "type":"integer"
             },
             "headers":{
                "$ref":"#/definitions/object",
                "description":"A map of string HTTP headers that where returned in the original request response."
             },
             "body":{
                "$ref":"#/definitions/object",
                "description":"The optional body returned in the original request response"
             }
          }
       },
       "error":{
        "type": "object",
          "properties":{
             "code":{
                "description":"The HTTP error code. For more information see https://en.wikipedia.org/wiki/List_of_HTTP_status_codes.",
                "type":"integer"
             },
             "message":{
                "description":"The error message.",
                "type":"string"
             }
          }
       }
    },
    "tags":[
       {
          "name":"account",
          "description":"Administrative operations accessible only by system administrators. These operations are not available for general use and will result in 404 response."
       },
       {
          "name":"user",
          "description":"Operations for controlling users and their associated privileges through groups and roles."
       },
       {
          "name":"group",
          "description":"Operations for controlling groups and their association with roles and users."
       },
       {
          "name":"role",
          "description":"Operations for controlling roles. These are the fundamental privilege models that determine a users access and functional capabilities."
       },
       {
          "name":"log",
          "description":"Operations for controlling logs. Logs are user requested loggings of system events. To facilitate interaction with logs they are categorised using groups and streams. Groups are user defined names to categorise the log into distinct groups. Streams are are a subdivision of groups using the originating service and a temporal marker."
       },
       {
          "name":"api_key",
          "description":"Operations for controlling API keys. These operations can only be performed by and for the original calling user."
       },
       {
          "name":"security",
          "description":"Operations relating to security and / or session management."
       }
    ],
    "securityDefinitions":{
       "basic_auth":{
          "type":"basic"
       }
    }
 }
