{
  "openapi": "3.0.0",
  "info": {
    "title": "Predictive Access SDK",
    "description": "The official Predictive Access SDK",
    "contact": {
      "name": "Predictive Support",
      "url": "https://predictivetech.io/contact",
      "email": "support@predictivetech.io"
    },
    "version": "1.0.0"
  },
  "paths": {
    "/accounts": {
      "get": {
        "summary": "get_accounts",
        "description": "Retrieves a collection of accounts.",
        "parameters": [
          {
            "name": "sort",
            "in": "query",
            "description": "The field name that should be used to sort the resulting collection. This value must exist as a property of the response object otherwise a default sort will be applied.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "The page number to request. If the value is larger than the maximum pages available the last page will be returned. If a value less than 1 is specified the first page will be returned. Collection information is available in the headers.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "perPage",
            "in": "query",
            "description": "The number of records to include in a single page. If a value of less than 1 is specified a best effort to return the whole collection will be made. This is not guaranteed and the response headers should be checked to obtain any additional pages.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "A comma separated list of property fields that should be included in the response model. These values must exist as a properties of the response object. The id field will always be returned regardless.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "A URL encoded query filter. For more information on filter formats see the documentation.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A collection (or subset) of accounts based on the callers privileges and the query parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/account"
                  }
                }
              }
            }
          },
          "400": {
            "description": "If the request is badly formatted. For specific information see the message in the response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemaserror"
                }
              }
            }
          },
          "401": {
            "description": "If the credentials used to make the call are invalid or expired.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemaserror"
                }
              }
            }
          },
          "403": {
            "description": "If the request is badly formatted. For specific information see the message in the response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemaserror"
                }
              }
            }
          },
          "500": {
            "description": "On rare occasions it is possible that a requests triggers an undefined error. These are reported automatically to the development team.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemaserror"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "create_account",
        "description": "Creates a new account with a root user. Both actions are considered to be part of the same atomic operation. If either fail the request will return an error and neither resource will be created.",
        "responses": {
          "201": {
            "description": "The created `new_account` containing both the root user and the account. These will include the auto generated id.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemasnew_account"
                }
              }
            }
          },
          "400": {
            "description": "If the request is badly formatted. For specific information see the message in the response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemaserror"
                }
              }
            }
          },
          "401": {
            "description": "If the credentials used to make the call are invalid or expired.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemaserror"
                }
              }
            }
          },
          "403": {
            "description": "If the request is badly formatted. For specific information see the message in the response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemaserror"
                }
              }
            }
          },
          "500": {
            "description": "On rare occasions it is possible that a requests triggers an undefined error. These are reported automatically to the development team.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemaserror"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemasnew_account"
              }
            }
          },
          "required": true
        }
      }
    },
    "/accounts/{accountId}": {
      "get": {
        "summary": "get_account"
      },
      "delete": {
        "summary": "delete_account"
      },
      "patch": {
        "summary": "modify_account"
      },
      "parameters": [
        {
          "name": "accountId",
          "in": "path",
          "description": "The id of the account.",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/accounts/{accountId}/datas": {
      "put": {
        "summary": "update_account_data"
      },
      "parameters": [
        {
          "name": "accountId",
          "in": "path",
          "description": "The id of the account.",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/accounts/{accountId}/users": {
      "get": {
        "summary": "get_account_users",
        "parameters": [
          {
            "name": "sort",
            "in": "query",
            "description": "The field name that should be used to sort the resulting collection. This value must exist as a property of the response object otherwise a default sort will be applied.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "The page number to request. If the value is larger than the maximum pages available the last page will be returned. If a value less than 1 is specified the first page will be returned. Collection information is available in the headers.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "perPage",
            "in": "query",
            "description": "The number of records to include in a single page. If a value of less than 1 is specified a best effort to return the whole collection will be made. This is not guaranteed and the response headers should be checked to obtain any additional pages.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "A comma separated list of property fields that should be included in the response model. These values must exist as a properties of the response object. The id field will always be returned regardless.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "A URL encoded query filter. For more information on filter formats see the documentation.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A collection (or subset) of accounts based on the callers privileges and the query parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/user"
                  }
                }
              }
            }
          },
          "400": {
            "description": "If the request is badly formatted. For specific information see the message in the response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemaserror"
                }
              }
            }
          },
          "401": {
            "description": "If the credentials used to make the call are invalid or expired.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemaserror"
                }
              }
            }
          },
          "403": {
            "description": "If the request is badly formatted. For specific information see the message in the response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemaserror"
                }
              }
            }
          },
          "500": {
            "description": "On rare occasions it is possible that a requests triggers an undefined error. These are reported automatically to the development team.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemaserror"
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "accountId",
          "in": "path",
          "description": "The id of the account.",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/users": {
      "get": {
        "summary": "get_users",
        "parameters": [
          {
            "name": "sort",
            "in": "query",
            "description": "The field name that should be used to sort the resulting collection. This value must exist as a property of the response object otherwise a default sort will be applied.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "The page number to request. If the value is larger than the maximum pages available the last page will be returned. If a value less than 1 is specified the first page will be returned. Collection information is available in the headers.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "perPage",
            "in": "query",
            "description": "The number of records to include in a single page. If a value of less than 1 is specified a best effort to return the whole collection will be made. This is not guaranteed and the response headers should be checked to obtain any additional pages.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "A comma separated list of property fields that should be included in the response model. These values must exist as a properties of the response object. The id field will always be returned regardless.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "A URL encoded query filter. For more information on filter formats see the documentation.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A collection (or subset) of users based on the callers privileges and the query parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/user"
                  }
                }
              }
            }
          },
          "400": {
            "description": "If the request is badly formatted. For specific information see the message in the response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemaserror"
                }
              }
            }
          },
          "401": {
            "description": "If the credentials used to make the call are invalid or expired.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemaserror"
                }
              }
            }
          },
          "403": {
            "description": "If the request is badly formatted. For specific information see the message in the response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemaserror"
                }
              }
            }
          },
          "500": {
            "description": "On rare occasions it is possible that a requests triggers an undefined error. These are reported automatically to the development team.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemaserror"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "create_user"
      }
    },
    "/users/{userId}": {
      "get": {
        "summary": "get_user"
      },
      "delete": {
        "summary": "delete_user"
      },
      "patch": {
        "summary": "modify_user"
      },
      "parameters": [
        {
          "name": "userId",
          "in": "path",
          "description": "The id of the user.",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/users/{userId}/datas": {
      "put": {
        "summary": "update_user_data"
      },
      "parameters": [
        {
          "name": "userId",
          "in": "path",
          "description": "The id of the user.",
          "required": true
        }
      ]
    },
    "/users/{userId}/roles": {
      "get": {
        "summary": "get_user_roles",
        "parameters": [
          {
            "name": "sort",
            "in": "query",
            "description": "The field name that should be used to sort the resulting collection. This value must exist as a property of the response object otherwise a default sort will be applied.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "The page number to request. If the value is larger than the maximum pages available the last page will be returned. If a value less than 1 is specified the first page will be returned. Collection information is available in the headers.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "perPage",
            "in": "query",
            "description": "The number of records to include in a single page. If a value of less than 1 is specified a best effort to return the whole collection will be made. This is not guaranteed and the response headers should be checked to obtain any additional pages.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "A comma separated list of property fields that should be included in the response model. These values must exist as a properties of the response object. The id field will always be returned regardless.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "A URL encoded query filter. For more information on filter formats see the documentation.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A collection (or subset) of user roles based on the callers privileges and the query parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/role"
                  }
                }
              }
            }
          },
          "400": {
            "description": "If the request is badly formatted. For specific information see the message in the response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemaserror"
                }
              }
            }
          },
          "401": {
            "description": "If the credentials used to make the call are invalid or expired.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemaserror"
                }
              }
            }
          },
          "403": {
            "description": "If the request is badly formatted. For specific information see the message in the response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemaserror"
                }
              }
            }
          },
          "500": {
            "description": "On rare occasions it is possible that a requests triggers an undefined error. These are reported automatically to the development team.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemaserror"
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "userId",
          "in": "path",
          "description": "The id of the user.",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/users/{userId}/roles/{roleId}": {
      "put": {
        "summary": "add_role_to_user"
      },
      "delete": {
        "summary": "remove_role_from_user"
      },
      "parameters": [
        {
          "name": "userId",
          "in": "path",
          "description": "The id of the user.",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "roleId",
          "in": "path",
          "description": "The id of the role.",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/users/{userId}/groups": {
      "get": {
        "summary": "get_user_groups",
        "parameters": [
          {
            "name": "sort",
            "in": "query",
            "description": "The field name that should be used to sort the resulting collection. This value must exist as a property of the response object otherwise a default sort will be applied.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "The page number to request. If the value is larger than the maximum pages available the last page will be returned. If a value less than 1 is specified the first page will be returned. Collection information is available in the headers.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "perPage",
            "in": "query",
            "description": "The number of records to include in a single page. If a value of less than 1 is specified a best effort to return the whole collection will be made. This is not guaranteed and the response headers should be checked to obtain any additional pages.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "A comma separated list of property fields that should be included in the response model. These values must exist as a properties of the response object. The id field will always be returned regardless.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "A URL encoded query filter. For more information on filter formats see the documentation.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A collection (or subset) of user groups based on the callers privileges and the query parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/group"
                  }
                }
              }
            }
          },
          "400": {
            "description": "If the request is badly formatted. For specific information see the message in the response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemaserror"
                }
              }
            }
          },
          "401": {
            "description": "If the credentials used to make the call are invalid or expired.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemaserror"
                }
              }
            }
          },
          "403": {
            "description": "If the request is badly formatted. For specific information see the message in the response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemaserror"
                }
              }
            }
          },
          "500": {
            "description": "On rare occasions it is possible that a requests triggers an undefined error. These are reported automatically to the development team.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemaserror"
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "userId",
          "in": "path",
          "description": "The id of the user.",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/users/{userId}/groups/{groupId}": {
      "put": {
        "summary": "add_group_to_user"
      },
      "delete": {
        "summary": "remove_group_from_user"
      },
      "parameters": [
        {
          "name": "userId",
          "in": "path",
          "description": "The id of the user.",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "groupId",
          "in": "path",
          "description": "The id of the group.",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/groups": {
      "get": {
        "summary": "get_groups",
        "parameters": [
          {
            "name": "sort",
            "in": "query",
            "description": "The field name that should be used to sort the resulting collection. This value must exist as a property of the response object otherwise a default sort will be applied.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "The page number to request. If the value is larger than the maximum pages available the last page will be returned. If a value less than 1 is specified the first page will be returned. Collection information is available in the headers.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "perPage",
            "in": "query",
            "description": "The number of records to include in a single page. If a value of less than 1 is specified a best effort to return the whole collection will be made. This is not guaranteed and the response headers should be checked to obtain any additional pages.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "A comma separated list of property fields that should be included in the response model. These values must exist as a properties of the response object. The id field will always be returned regardless.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "A URL encoded query filter. For more information on filter formats see the documentation.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A collection (or subset) of groups based on the callers privileges and the query parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/group"
                  }
                }
              }
            }
          },
          "400": {
            "description": "If the request is badly formatted. For specific information see the message in the response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemaserror"
                }
              }
            }
          },
          "401": {
            "description": "If the credentials used to make the call are invalid or expired.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemaserror"
                }
              }
            }
          },
          "403": {
            "description": "If the request is badly formatted. For specific information see the message in the response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemaserror"
                }
              }
            }
          },
          "500": {
            "description": "On rare occasions it is possible that a requests triggers an undefined error. These are reported automatically to the development team.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemaserror"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "create_group"
      }
    },
    "/groups/{groupId}": {
      "get": {
        "summary": "get_group"
      },
      "delete": {
        "summary": "delete_group"
      },
      "patch": {
        "summary": "modify_group"
      },
      "parameters": [
        {
          "name": "groupId",
          "in": "path",
          "description": "The id of the group.",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/groups/{groupId}/datas": {
      "put": {
        "summary": "update_group_data"
      },
      "parameters": [
        {
          "name": "groupId",
          "in": "path",
          "description": "The id of the group.",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/groups/{groupId}/roles": {
      "get": {
        "summary": "get_group_roles",
        "parameters": [
          {
            "name": "sort",
            "in": "query",
            "description": "The field name that should be used to sort the resulting collection. This value must exist as a property of the response object otherwise a default sort will be applied.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "The page number to request. If the value is larger than the maximum pages available the last page will be returned. If a value less than 1 is specified the first page will be returned. Collection information is available in the headers.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "perPage",
            "in": "query",
            "description": "The number of records to include in a single page. If a value of less than 1 is specified a best effort to return the whole collection will be made. This is not guaranteed and the response headers should be checked to obtain any additional pages.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "A comma separated list of property fields that should be included in the response model. These values must exist as a properties of the response object. The id field will always be returned regardless.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "A URL encoded query filter. For more information on filter formats see the documentation.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A collection (or subset) of group roles based on the callers privileges and the query parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/role"
                  }
                }
              }
            }
          },
          "400": {
            "description": "If the request is badly formatted. For specific information see the message in the response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemaserror"
                }
              }
            }
          },
          "401": {
            "description": "If the credentials used to make the call are invalid or expired.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemaserror"
                }
              }
            }
          },
          "403": {
            "description": "If the request is badly formatted. For specific information see the message in the response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemaserror"
                }
              }
            }
          },
          "500": {
            "description": "On rare occasions it is possible that a requests triggers an undefined error. These are reported automatically to the development team.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemaserror"
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "groupId",
          "in": "path",
          "description": "The id of the group.",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/groups/{groupId}/roles/{roleId}": {
      "put": {
        "summary": "add_role_to_group"
      },
      "delete": {
        "summary": "remove_role_from_group"
      },
      "parameters": [
        {
          "name": "groupId",
          "in": "path",
          "description": "The id of the group.",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "roleId",
          "in": "path",
          "description": "The id of the role.",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/groups/{groupId}/users": {
      "get": {
        "summary": "get_group_users",
        "parameters": [
          {
            "name": "sort",
            "in": "query",
            "description": "The field name that should be used to sort the resulting collection. This value must exist as a property of the response object otherwise a default sort will be applied.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "The page number to request. If the value is larger than the maximum pages available the last page will be returned. If a value less than 1 is specified the first page will be returned. Collection information is available in the headers.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "perPage",
            "in": "query",
            "description": "The number of records to include in a single page. If a value of less than 1 is specified a best effort to return the whole collection will be made. This is not guaranteed and the response headers should be checked to obtain any additional pages.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "A comma separated list of property fields that should be included in the response model. These values must exist as a properties of the response object. The id field will always be returned regardless.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "A URL encoded query filter. For more information on filter formats see the documentation.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A collection (or subset) of group users based on the callers privileges and the query parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/user"
                  }
                }
              }
            }
          },
          "400": {
            "description": "If the request is badly formatted. For specific information see the message in the response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemaserror"
                }
              }
            }
          },
          "401": {
            "description": "If the credentials used to make the call are invalid or expired.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemaserror"
                }
              }
            }
          },
          "403": {
            "description": "If the request is badly formatted. For specific information see the message in the response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemaserror"
                }
              }
            }
          },
          "500": {
            "description": "On rare occasions it is possible that a requests triggers an undefined error. These are reported automatically to the development team.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemaserror"
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "groupId",
          "in": "path",
          "description": "The id of the group.",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/roles": {
      "get": {
        "summary": "get_roles",
        "parameters": [
          {
            "name": "sort",
            "in": "query",
            "description": "The field name that should be used to sort the resulting collection. This value must exist as a property of the response object otherwise a default sort will be applied.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "The page number to request. If the value is larger than the maximum pages available the last page will be returned. If a value less than 1 is specified the first page will be returned. Collection information is available in the headers.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "perPage",
            "in": "query",
            "description": "The number of records to include in a single page. If a value of less than 1 is specified a best effort to return the whole collection will be made. This is not guaranteed and the response headers should be checked to obtain any additional pages.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "A comma separated list of property fields that should be included in the response model. These values must exist as a properties of the response object. The id field will always be returned regardless.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "A URL encoded query filter. For more information on filter formats see the documentation.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A collection (or subset) of roles based on the callers privileges and the query parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/role"
                  }
                }
              }
            }
          },
          "400": {
            "description": "If the request is badly formatted. For specific information see the message in the response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemaserror"
                }
              }
            }
          },
          "401": {
            "description": "If the credentials used to make the call are invalid or expired.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemaserror"
                }
              }
            }
          },
          "403": {
            "description": "If the request is badly formatted. For specific information see the message in the response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemaserror"
                }
              }
            }
          },
          "500": {
            "description": "On rare occasions it is possible that a requests triggers an undefined error. These are reported automatically to the development team.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemaserror"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "create_role"
      }
    },
    "/roles/{roleId}": {
      "get": {
        "summary": "get_role"
      },
      "delete": {
        "summary": "delete_role"
      },
      "patch": {
        "summary": "modify_role"
      },
      "parameters": [
        {
          "name": "roleId",
          "in": "path",
          "description": "The id of the role.",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/roles/{roleId}/statements": {
      "post": {
        "summary": "create_statement_for_role"
      },
      "parameters": [
        {
          "name": "roleId",
          "in": "path",
          "description": "The id of the role.",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/roles/{roleId}/statements/{statementId}": {
      "put": {
        "summary": "modify_role_statement"
      },
      "delete": {
        "summary": "delete_statement_from_role"
      },
      "parameters": [
        {
          "name": "roleId",
          "in": "path",
          "description": "The id of the role.",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "statementId",
          "in": "path",
          "description": "The id of the statement.",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/logs/groups": {
      "get": {
        "summary": "get_log_groups",
        "parameters": [
          {
            "name": "sort",
            "in": "query",
            "description": "The field name that should be used to sort the resulting collection. This value must exist as a property of the response object otherwise a default sort will be applied.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "The page number to request. If the value is larger than the maximum pages available the last page will be returned. If a value less than 1 is specified the first page will be returned. Collection information is available in the headers.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "perPage",
            "in": "query",
            "description": "The number of records to include in a single page. If a value of less than 1 is specified a best effort to return the whole collection will be made. This is not guaranteed and the response headers should be checked to obtain any additional pages.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "A comma separated list of property fields that should be included in the response model. These values must exist as a properties of the response object. The id field will always be returned regardless.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "A URL encoded query filter. For more information on filter formats see the documentation.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A collection (or subset) of log groups based on the callers privileges and the query parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/log_group"
                  }
                }
              }
            }
          },
          "400": {
            "description": "If the request is badly formatted. For specific information see the message in the response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemaserror"
                }
              }
            }
          },
          "401": {
            "description": "If the credentials used to make the call are invalid or expired.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemaserror"
                }
              }
            }
          },
          "403": {
            "description": "If the request is badly formatted. For specific information see the message in the response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemaserror"
                }
              }
            }
          },
          "500": {
            "description": "On rare occasions it is possible that a requests triggers an undefined error. These are reported automatically to the development team.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemaserror"
                }
              }
            }
          }
        }
      }
    },
    "/logs/groups/{groupId}": {
      "get": {
        "summary": "get_log_group"
      },
      "delete": {
        "summary": "delete_log_group"
      },
      "parameters": [
        {
          "name": "groupId",
          "in": "path",
          "description": "The id of the log group.",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/logs/groups/{groupId}/streams": {
      "get": {
        "summary": "get_log_streams",
        "parameters": [
          {
            "name": "sort",
            "in": "query",
            "description": "The field name that should be used to sort the resulting collection. This value must exist as a property of the response object otherwise a default sort will be applied.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "The page number to request. If the value is larger than the maximum pages available the last page will be returned. If a value less than 1 is specified the first page will be returned. Collection information is available in the headers.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "perPage",
            "in": "query",
            "description": "The number of records to include in a single page. If a value of less than 1 is specified a best effort to return the whole collection will be made. This is not guaranteed and the response headers should be checked to obtain any additional pages.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "A comma separated list of property fields that should be included in the response model. These values must exist as a properties of the response object. The id field will always be returned regardless.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "A URL encoded query filter. For more information on filter formats see the documentation.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A collection (or subset) of log streams based on the callers privileges and the query parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/log_stream"
                  }
                }
              }
            }
          },
          "400": {
            "description": "If the request is badly formatted. For specific information see the message in the response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemaserror"
                }
              }
            }
          },
          "401": {
            "description": "If the credentials used to make the call are invalid or expired.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemaserror"
                }
              }
            }
          },
          "403": {
            "description": "If the request is badly formatted. For specific information see the message in the response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemaserror"
                }
              }
            }
          },
          "500": {
            "description": "On rare occasions it is possible that a requests triggers an undefined error. These are reported automatically to the development team.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemaserror"
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "groupId",
          "in": "path",
          "description": "The id of the log group.",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/logs/groups/{groupId}/streams/{streamId}": {
      "get": {
        "summary": "get_log_stream"
      },
      "parameters": [
        {
          "name": "groupId",
          "in": "path",
          "description": "The id of the log group.",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "streamId",
          "in": "path",
          "description": "The id of the log stream.",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/logs/groups/{groupId}/streams/{streamId}/events": {
      "get": {
        "summary": "get_log_events",
        "parameters": [
          {
            "name": "sort",
            "in": "query",
            "description": "The field name that should be used to sort the resulting collection. This value must exist as a property of the response object otherwise a default sort will be applied.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "The page number to request. If the value is larger than the maximum pages available the last page will be returned. If a value less than 1 is specified the first page will be returned. Collection information is available in the headers.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "perPage",
            "in": "query",
            "description": "The number of records to include in a single page. If a value of less than 1 is specified a best effort to return the whole collection will be made. This is not guaranteed and the response headers should be checked to obtain any additional pages.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "A comma separated list of property fields that should be included in the response model. These values must exist as a properties of the response object. The id field will always be returned regardless.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "A URL encoded query filter. For more information on filter formats see the documentation.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A collection (or subset) of log events based on the callers privileges and the query parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/log_event"
                  }
                }
              }
            }
          },
          "400": {
            "description": "If the request is badly formatted. For specific information see the message in the response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemaserror"
                }
              }
            }
          },
          "401": {
            "description": "If the credentials used to make the call are invalid or expired.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemaserror"
                }
              }
            }
          },
          "403": {
            "description": "If the request is badly formatted. For specific information see the message in the response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemaserror"
                }
              }
            }
          },
          "500": {
            "description": "On rare occasions it is possible that a requests triggers an undefined error. These are reported automatically to the development team.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemaserror"
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "groupId",
          "in": "path",
          "description": "The id of the log group.",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "streamId",
          "in": "path",
          "description": "The id of the log stream.",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/logs/groups/{groupId}/streams/{streamId}/events/{eventId}": {
      "get": {
        "summary": "get_log_event"
      },
      "parameters": [
        {
          "name": "groupId",
          "in": "path",
          "description": "The id of the log group.",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "streamId",
          "in": "path",
          "description": "The id of the log stream.",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "eventId",
          "in": "path",
          "description": "The id of the log event.",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/apikeys": {
      "get": {
        "summary": "get_api_keys",
        "parameters": [
          {
            "name": "sort",
            "in": "query",
            "description": "The field name that should be used to sort the resulting collection. This value must exist as a property of the response object otherwise a default sort will be applied.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "The page number to request. If the value is larger than the maximum pages available the last page will be returned. If a value less than 1 is specified the first page will be returned. Collection information is available in the headers.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "perPage",
            "in": "query",
            "description": "The number of records to include in a single page. If a value of less than 1 is specified a best effort to return the whole collection will be made. This is not guaranteed and the response headers should be checked to obtain any additional pages.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "A comma separated list of property fields that should be included in the response model. These values must exist as a properties of the response object. The id field will always be returned regardless.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "A URL encoded query filter. For more information on filter formats see the documentation.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A collection (or subset) of api keys belonging to the callers and based on the query parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/api_key"
                  }
                }
              }
            }
          },
          "400": {
            "description": "If the request is badly formatted. For specific information see the message in the response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemaserror"
                }
              }
            }
          },
          "401": {
            "description": "If the credentials used to make the call are invalid or expired.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemaserror"
                }
              }
            }
          },
          "403": {
            "description": "If the request is badly formatted. For specific information see the message in the response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemaserror"
                }
              }
            }
          },
          "500": {
            "description": "On rare occasions it is possible that a requests triggers an undefined error. These are reported automatically to the development team.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemaserror"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "create_api_key"
      }
    },
    "/apikeys/{apikeyId}": {
      "get": {
        "summary": "get_api_key"
      },
      "delete": {
        "summary": "delete_api_key"
      },
      "patch": {
        "summary": "modify_api_key"
      },
      "parameters": [
        {
          "name": "apikeyId",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/privileges": {
      "get": {
        "summary": "get_user_privileges"
      }
    },
    "/sessions": {
      "post": {
        "summary": "create_session"
      }
    },
    "/validations": {
      "put": {
        "summary": "validate"
      }
    },
    "/batches": {
      "post": {
        "summary": "execute_batch_requests"
      }
    }
  },
  "components": {
    "schemas": {
      "data": {},
      "account": {
        "properties": {
          "id": {
            "description": "A unique identifier. This is generated by the system at creation and cannot be specified.",
            "type": "string"
          },
          "name": {
            "description": "A simple name to help identify the account within its operational context.",
            "type": "string"
          },
          "description": {
            "description": "A short descriptive field to help identify the account within its operational context. ",
            "type": "string"
          },
          "data": {
            "$ref": "#/components/schemas/data",
            "description": "A multimap defining a custom collection of KSVP (Key Set Value Pair)"
          }
        }
      },
      "user": {
        "properties": {
          "id": {
            "description": "A unique identifier. This is generated by the system at creation and cannot be specified.",
            "type": "string"
          },
          "email": {
            "description": "A unique email assigned to to a user for security and identification.",
            "type": "string"
          },
          "username": {
            "description": "A unique username assigned to to a user for identification.",
            "type": "string"
          },
          "name": {
            "description": "The first and last name of the user.",
            "type": "string"
          },
          "state": {
            "description": "The operational state of an account. This value can be 'ACTIVE', 'SUSPENDED' or 'UNCONFIRMED'.",
            "type": "string"
          },
          "data": {
            "$ref": "#/components/schemas/data",
            "description": "A multimap defining a custom collection of KSVP (Key Set Value Pair)"
          },
          "roleIds": {
            "description": "A collection of the role ids associated with the user.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "groupIds": {
            "description": "A collection of the group ids associated with the user.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "bio": {
            "description": "A short biography or description of the user.",
            "type": "string"
          }
        }
      },
      "group": {
        "properties": {
          "id": {
            "description": "A unique identifier. This is generated by the system at creation and cannot be specified.",
            "type": "string"
          },
          "name": {
            "description": "A simple name to help identify the group within its operational context.",
            "type": "string"
          },
          "description": {
            "description": "A short descriptive field to help identify the group within its operational context. ",
            "type": "string"
          },
          "data": {
            "$ref": "#/components/schemas/data",
            "description": "A multimap defining a custom collection of KSVP (Key Set Value Pair)"
          }
        }
      },
      "rule": {
        "properties": {
          "id": {
            "description": "An optional field identifier.",
            "type": "string"
          },
          "field": {
            "description": "The optional GUI field. Even though this property is optional it is recommended or the GUI may fail to recognise the field.",
            "type": "string"
          },
          "type": {
            "description": "The optional field type. If specified a best effort will be made to perform a type cast at evaluation time of the value. If no type is specified or the cast fails the value will be evaluated as a string.",
            "type": "string"
          },
          "input": {
            "description": "The required field input name. During a rule evaluation the pattern is [input] [operator] [value]. e.g. [id] [equal] [123]",
            "type": "string"
          },
          "operator": {
            "description": "The required operator to define the evaluation comparison that must be achieved during evaluation. These values can be: `equal`, `not equal`, `in`, `not in`, `start`, `not start`, `end`, `not end`, `less`, `less or equal`, `greater` or `greater or equal`.",
            "type": "string"
          },
          "value": {
            "description": "The required field input value. All value types are serialised to a string for transport. The `type` property is used to type cast the value at evaluation time. During a rule evaluation the pattern is [input] [operator] [value]. e.g. [id] [equal] [123]",
            "type": "string"
          },
          "expression": {
            "$ref": "#/components/schemas/expression",
            "description": "An optional sub-expression to evaluate as part of this rule."
          }
        }
      },
      "expression": {
        "properties": {
          "condition": {
            "description": "The logical condition that should be applied to the rule evaluation. This can be `AND` or `OR`.",
            "type": "string"
          },
          "rules": {
            "description": "A collection of rules that are to be evaluated as part of this expression.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/rule"
            }
          }
        }
      },
      "statement": {
        "properties": {
          "id": {
            "description": "A unique identifier. This is generated by the system at creation and cannot be specified.",
            "type": "string"
          },
          "effect": {
            "description": "The resulting effect that should be applied as a result of the statement. Allowed values are `ALLOW` or `DENY`.  This allows both implicit and explicit denial of services.",
            "type": "string"
          },
          "actions": {
            "description": "A collection of service context actions that must be matched for the statement to take effect. The action keys are used to manager application action privileges. The actions are designed to format the action request designating the target application, service and action in the following format: [application]:[service]:[action]. The application and service are always in lower case while the action is in Camel Case. e.g. access:group:AddAccount. For more information see the documentation.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "expression": {
            "$ref": "#/components/schemas/expression",
            "description": "An optional expression. If this value is supplied access to an application or service will be considered conditional. The role will perform evaluations on an individual model basis to determine whether they pass or fail the expression."
          }
        }
      },
      "role": {
        "properties": {
          "id": {
            "description": "A unique identifier. This is generated by the system at creation and cannot be specified.",
            "type": "string"
          },
          "name": {
            "description": "A simple name to help identify the role within its operational context.",
            "type": "string"
          },
          "description": {
            "description": "A short descriptive field to help identify the role within its operational context. ",
            "type": "string"
          },
          "statements": {
            "$ref": "#/components/schemas/statement",
            "description": "A collection of statements defining the logic and privileges associated with this role."
          }
        }
      },
      "log_group": {
        "properties": {
          "id": {
            "description": "A unique identifier. This is generated by the system at creation and cannot be specified.",
            "type": "string"
          },
          "name": {
            "description": "A simple user defined name to help sub categories the logs within its operational context.",
            "type": "string"
          },
          "retention": {
            "format": "int32",
            "description": "The number of hours that logs should be retained before expiring.",
            "type": "integer"
          }
        }
      },
      "log_stream": {
        "properties": {
          "id": {
            "description": "A unique identifier. This is generated by the system at creation and cannot be specified.",
            "type": "string"
          },
          "name": {
            "description": "Stream names are system generated to help categories logs with a service and temporal marker. Stream names are in the format: yyyy/mm/dd-[event-type]-[workflow-id] e.g. 2018/01/01-[access:user:Create]-[12345678-abcdefgh]",
            "type": "string"
          }
        }
      },
      "log_event": {
        "properties": {
          "id": {
            "description": "A unique identifier. This is generated by the system at creation and cannot be specified.",
            "type": "string"
          },
          "message": {
            "description": "The log message containing the information about the event. The format will depend on the workflow settings.",
            "type": "string"
          },
          "date": {
            "format": "date-time",
            "description": "The event timestamp.",
            "type": "string"
          }
        }
      },
      "api_key": {
        "properties": {
          "id": {
            "description": "A unique identifier. This is generated by the system at creation and cannot be specified. This also acts as the public half of the asymmetric key.",
            "type": "string"
          },
          "privateKey": {
            "description": "The private key used in combination with the id (public key) to perform asymmetric digest signatures.",
            "type": "string"
          },
          "state": {
            "description": "The operational state of the key pair. This can be `ACTIVE` or `INACTIVE`.",
            "type": "string"
          }
        }
      },
      "validation": {
        "properties": {
          "secret": {
            "description": "The secret / password to assign to the user.",
            "type": "string"
          }
        }
      },
      "session": {
        "properties": {
          "expires": {
            "format": "int64",
            "description": "The unix timestamp (in seconds) when the session token will expire.",
            "type": "integer"
          },
          "id": {
            "description": "A unique identifier. This is generated by the system at creation and cannot be specified. This is the value that should be used with the `session_auth` as the bearer token value.",
            "type": "string"
          }
        }
      },
      "new_account": {
        "properties": {
          "account": {
            "$ref": "#/components/schemas/account",
            "description": "The new account that will be created and the specified user will be added to."
          },
          "user": {
            "$ref": "#/components/schemas/user",
            "description": "The new root user that will be associated with the account."
          }
        }
      },
      "batch_request": {
        "properties": {
          "id": {
            "description": "An optional but recommended id value to be able to match the response in the response collection to the original request. If one is not provided a random one will be generated and appended to the response.",
            "type": "string"
          },
          "method": {
            "description": "The HTTP method associated with the request. Values can be `GET`, `PATCH`, `PUT`, `POST`, `DELETE`, `CONNECT`, `HEAD`, `TRACE` or `OPTIONS`",
            "type": "string"
          },
          "path": {
            "description": "The full path of the request starting with forward slash (/). e.g. /users",
            "type": "string"
          },
          "queryParameters": {
            "$ref": "#/components/schemas/object",
            "description": "An optional map of query parameter values to pass as part of the request."
          },
          "body": {
            "$ref": "#/components/schemas/object",
            "description": "Any object that the request body is expecting."
          }
        }
      },
      "object": {},
      "batch_response": {
        "properties": {
          "request": {
            "$ref": "#/components/schemas/batch_request",
            "description": "The original batch request object that was executed."
          },
          "statusCode": {
            "description": "The HTTP status code of the response from the original request.",
            "type": "integer"
          },
          "headers": {
            "$ref": "#/components/schemas/object",
            "description": "A map of string HTTP headers that where returned in the original request response."
          },
          "body": {
            "$ref": "#/components/schemas/object",
            "description": "The optional body returned in the original request response"
          }
        }
      },
      "error": {
        "properties": {
          "code": {
            "description": "The HTTP error code. For more information see https://en.wikipedia.org/wiki/List_of_HTTP_status_codes.",
            "type": "integer"
          },
          "message": {
            "description": "The error message.",
            "type": "string"
          }
        }
      }
    },
    "securitySchemes": {
      "basic_auth": {
        "type": "http",
        "description": "Basic authentication supports root credentials. The identifier can be either your email or username.",
        "scheme": "Basic"
      },
      "session_auth": {
        "type": "http",
        "description": "Authenticated tokens can be used to provide client session authentication.",
        "scheme": "Bearer"
      },
      "validation_auth": {
        "type": "http",
        "description": "Unconfirmed users are issued with a time sensitive bearer token via email which they must supply for one time validation.",
        "scheme": "Bearer"
      },
      "key_auth": {
        "type": "http",
        "description": "Predictive uses asymmetric API keys to authenticate. For more information on how to generate a digest request signature please see the API documentation.",
        "scheme": "Digest"
      }
    }
  },
  "tags": [
    {
      "name": "account",
      "description": "Administrative operations accessible only by system administrators. These operations are not available for general use and will result in 404 response."
    },
    {
      "name": "user",
      "description": "Operations for controlling users and their associated privileges through groups and roles."
    },
    {
      "name": "group",
      "description": "Operations for controlling groups and their association with roles and users."
    },
    {
      "name": "role",
      "description": "Operations for controlling roles. These are the fundamental privilege models that determine a users access and functional capabilities."
    },
    {
      "name": "log",
      "description": "Operations for controlling logs. Logs are user requested loggings of system events. To facilitate interaction with logs they are categorised using groups and streams. Groups are user defined names to categorise the log into distinct groups. Streams are are a subdivision of groups using the originating service and a temporal marker."
    },
    {
      "name": "api_key",
      "description": "Operations for controlling API keys. These operations can only be performed by and for the original calling user."
    }
  ]
}